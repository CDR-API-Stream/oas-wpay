{
  "openapi": "3.0.1",
  "info": {
    "title": "Digital Pay APIs",
    "description": "No description",
    "contact": {
      "name": "Francois van der Merwe",
      "email": "digitalpayprojectteam@woolworths.com.au"
    },
    "version": "3.22.0"
  },
  "servers": [
    {
      "url": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay",
      "description": "Non-Production Servers",
      "variables": {
        "environment": {
          "default": "dev",
          "enum": [
            "dev",
            "test",
            "uat"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Wallet Management"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Payment Agreements"
    },
    {
      "name": "Openpay"
    }
  ],
  "paths": {
    "/cards/initcapture": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Initiate Card Capture",
        "description": "Get a credit card detials input iframe (URL) for the consumer. This API is rate limited to 10 requests per minute per shopper id.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCardCaptureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateCardCaptureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/paypal/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Tokenize Paypal",
        "description": "Create a paymment intrument id for a provided paypal account.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizePaypalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizePaypalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/giftcards/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Tokenize Giftcard",
        "description": "Create a paymment intrument id for a provided gift card.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeGiftcardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeGiftcardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/giftcards/balance": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Gift Cards Balance",
        "description": "Get the balance and expiryinfo for the provided gift cards. This API is rate limited to 5 requests per minute per shopper id.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftcardsBalanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiftcardsBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/androidpay/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Tokenize Android Pay",
        "description": "Create a payment instrument id for a provided Android Pay wallet item.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeAndroidPayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeAndroidPayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/androidpay/tokenize/{paymentInstrumentId}": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Update Android Pay Token",
        "description": "Update an Android Pay payment instrument.",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "The id of the android pay payment instrument to update.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20191"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeAndroidPayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeAndroidPayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/googlepay/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Tokenize Google Pay",
        "description": "Create a payment token for a provided Google Pay wallet item.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeGooglePayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeGooglePayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/googlepay/tokenize/{paymentToken}": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Update Google Pay Token",
        "description": "Update a Google Pay payment instrument.",
        "parameters": [
          {
            "name": "paymentToken",
            "in": "path",
            "description": "The payment token of the google pay payment instrument to update.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeGooglePayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeGooglePayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/applepay/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Tokenize Apple Pay",
        "description": "Create a payment instrument id for a provided Apple Pay wallet item.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeApplePayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeApplePayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/applepay/tokenize/{paymentInstrumentId}": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Update Apple Pay Token",
        "description": "Update an Apple Pay payment instrument.",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "The id of the apple pay payment instrument to update.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20192"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeApplePayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeApplePayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/instruments/import": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Import Payment Instruments",
        "description": "Import a consumers credit cards (from WebPay) and paypal accounts to a new wallet. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPaymentInstrumentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportPaymentInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/instruments/verify": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Verify Payment Instruments",
        "description": "Verify if a provided payment instrument is valid and optionally perform a fraud check on the instrument.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPaymentInstrumentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPaymentInstrumentsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPaymentInstrumentsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPaymentInstrumentsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPaymentInstrumentsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPaymentInstrumentsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/instruments": {
      "get": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "List Payment Instruments",
        "description": "Get the stored payment intruments of a consumer.",
        "parameters": [
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaymentInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "List Payment Instruments",
        "description": "Get the stored payment intruments of a consumer. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListPaymentInstrumentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaymentInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/instruments/{paymentInstrumentId}": {
      "delete": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Delete Payment Instrument",
        "description": "Delete a stored payment intrument of a consumer.",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "description": "The id of the payment instrument to delete.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "81054"
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePaymentInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Transaction History",
        "description": "Get the transaction history of a consumer.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionHistoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/merchants/profile": {
      "get": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Merchant Profile",
        "description": "Get the current configuration set of the merchant. If this API is called without a valid access token it is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wallet/delete": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Delete Wallet",
        "description": "Delete a consumers wallet. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWalletRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/guest/cards/initcapture": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Guest Initiate Card Capture",
        "description": "Get a credit card detials input iframe (URL) for a guest user. This API is rate limited to 10 requests per minute per guest shopper id.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCardCaptureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateCardCaptureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/guest/paypal/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Guest Tokenize Paypal",
        "description": "Create a paymment intrument id for a provided paypal account of a guest user.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestTokenizePaypalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestTokenizePaypalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/guest/giftcards/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Guest Tokenize Giftcard",
        "description": "Create a paymment intrument id for a provided gift card of a guest user.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestTokenizeGiftcardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestTokenizeGiftcardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/guest/googlepay/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Guest Tokenize Google Pay",
        "description": "Create a payment token for a provided Google Pay wallet item of a guest user.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenizeGooglePayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeGooglePayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/guest/applepay/tokenize": {
      "post": {
        "tags": [
          "Wallet Management"
        ],
        "summary": "Guest Tokenize Apple Pay",
        "description": "Create a payment instrument id for a provided Apple Pay wallet item of a guest user.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestTokenizeApplePayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizeApplePayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments",
        "description": "Make payments to a merchant using payment intruments.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          },
          {
            "name": "X-Everyday-Pay-Wallet",
            "description": "A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \"true\" to use the Everyday Pay wallet. Set the header value to \"false\" or exclude the header completely to use the default merchant wallet.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "example": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/completions": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Completions",
        "description": "Complete pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/voids": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Voids",
        "description": "Void (cancel) pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refunds",
        "description": "Refund payments. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/guest/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Guest Payments",
        "description": "Make guest payments to a merchant using guest payment intruments.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/paymentagreements": {
      "post": {
        "tags": [
          "Payment Agreements"
        ],
        "summary": "Create Payment Agreement",
        "description": "Create a new payment agreement which will be added to the users wallet after validating the payment instrument. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentAgreementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/paymentagreements/{paymentToken}": {
      "post": {
        "tags": [
          "Payment Agreements"
        ],
        "summary": "Update Payment Agreement",
        "description": "Update an existing payment agreement and validate the payment instrument if changed. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "paymentToken",
            "in": "path",
            "description": "The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "27e07e4e-58df-4072-8e75-33dd464af667"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentAgreementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Payment Agreements"
        ],
        "summary": "Delete Payment Agreement",
        "description": "Delete an existing payment agreement. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "paymentToken",
            "in": "path",
            "description": "The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePaymentAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/paymentagreements/charge": {
      "post": {
        "tags": [
          "Payment Agreements"
        ],
        "summary": "Charge Payment Agreement",
        "description": "Perform charge transaction against a payment agreement. This service will use the provided information to perform the charge transaction. A charge payment is made by the merchant to charge a customer as per their payment agreement. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargePaymentAgreementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAgreementErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/openpay/payments": {
      "post": {
        "tags": [
          "Openpay"
        ],
        "summary": "Openpay Payments",
        "description": "Make payments to a merchant using Openpay payment tokens.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "Authorization",
            "description": "The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "Bearer 7M8hv8tqpdfSnsEZIDBzJNo91MHF"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenpayPaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayPaymentsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayPaymentsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayPaymentsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayPaymentsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayPaymentsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/openpay/completions": {
      "post": {
        "tags": [
          "Openpay"
        ],
        "summary": "Openpay Completions",
        "description": "Complete pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenpayCompletionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayCompletionsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayCompletionsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayCompletionsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayCompletionsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayCompletionsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/openpay/voids": {
      "post": {
        "tags": [
          "Openpay"
        ],
        "summary": "Openpay Voids",
        "description": "Void (cancel) pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenpayVoidsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayVoidsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayVoidsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayVoidsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayVoidsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayVoidsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/openpay/refunds": {
      "post": {
        "tags": [
          "Openpay"
        ],
        "summary": "Openpay Refunds",
        "description": "Refund Openpay payments. This API is IP restricted to allow unauthenticated server side calls.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the body of the request.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "X-Api-Key",
            "description": "The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "haTdoUWVhnXm5n75u6d0VG67vCCvKjQC"
          },
          {
            "name": "X-Auth-Key",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "OHR1Ull5TVk53NjI5Ng=="
          },
          {
            "name": "X-Auth-Digest",
            "in": "header",
            "description": "(Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present.",
            "schema": {
              "type": "string"
            },
            "example": "c51e0ee540cd3893982d3539d81fddec0bcd832d"
          },
          {
            "name": "X-Message-Id",
            "in": "header",
            "description": "This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request.",
            "schema": {
              "type": "string"
            },
            "example": "f23c096b2e816da158fdf1ad839298e2"
          },
          {
            "name": "X-JWS-Signature",
            "description": "The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRldiIsInZlcmIiOiJQT1NUIiwidXJsIjoiaHR0cHM6Ly9kZXYubW9iaWxlLWFwaS53b29sd29ydGhzLmNvbS5hdS93b3cvdjEvandzZGVtby92YWxpZGF0ZSIsInRpbWVzdGFtcCI6MTU5NTIwNjcxNDQzOH0..muEr0b3GNORrP0FW1ohUh2XITRNaOO7uBz"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenpayRefundsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayRefundsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid request payload or value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayRefundsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid API Route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayRefundsErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "A Business Validation error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayRefundsErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "An Internal System error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenpayRefundsErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The Service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "The request timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "InitiateCardCaptureRequest": {
        "required": [
          "clientReference"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "JRIQ6EOK2NEQ6BY"
          }
        },
        "description": "The JSON request structure of the Initiate Card Capture endpoint.",
        "example": {
          "clientReference": "JRIQ6EOK2NEQ6BY"
        }
      },
      "InitiateCardCaptureResponse": {
        "required": [
          "cardCaptureURL"
        ],
        "type": "object",
        "properties": {
          "cardCaptureURL": {
            "type": "string",
            "description": "The URL of an iframe. This iframe is used to capture a credit card number, expiry and CVV.",
            "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/7038dda0-5928-4656-b051-b6c2ba20a8b7"
          },
          "transactionRef": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the transaction in the container.",
            "example": "1000000000661300"
          }
        },
        "description": "The JSON response structure of the Initiate Card Capture endpoint.",
        "example": {
          "cardCaptureURL": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/7038dda0-5928-4656-b051-b6c2ba20a8b7",
          "transactionRef": "1000000000661300"
        }
      },
      "TokenizePaypalRequest": {
        "required": [
          "nonce",
          "primary"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string",
            "description": "The Paypal nonce that will be used during a Paypal payment.",
            "example": "d5e2986b-ffd5-03af-1bee-ff2dc1e83a56"
          },
          "primary": {
            "type": "boolean",
            "description": "A flag to indicate if this payment instrument has to be set as the primary instrument.",
            "example": true
          }
        },
        "description": "The JSON request structure of the Tokenize Paypal endpoint.",
        "example": {
          "nonce": "d5e2986b-ffd5-03af-1bee-ff2dc1e83a56",
          "primary": true
        }
      },
      "TokenizePaypalResponse": {
        "required": [
          "payPal"
        ],
        "type": "object",
        "properties": {
          "payPal": {
            "required": [
              "allowed",
              "customerId",
              "lastUpdated",
              "lastUsed",
              "payPalId",
              "paymentInstrumentId",
              "primary",
              "status"
            ],
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The new payment instrument id to be used for payments.",
                "example": "90271"
              },
              "status": {
                "type": "string",
                "description": "The status of the payment instrument in the container.",
                "enum": [
                  "UNVERIFIED_PERSISTENT",
                  "VERIFIED"
                ]
              },
              "lastUpdated": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                "example": "2017-10-26T04:56:25.046Z"
              },
              "lastUsed": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                "example": "2017-10-26T04:56:25.046Z"
              },
              "primary": {
                "type": "boolean",
                "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                "example": true
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                "example": true
              },
              "payPalId": {
                "type": "string",
                "description": "The Paypal email id.",
                "example": "jane.doe@paypal.com"
              },
              "customerId": {
                "type": "string",
                "description": "The Paypal customer id.",
                "example": "690238314"
              }
            }
          }
        },
        "description": "The JSON response structure of the Tokenize Paypal endpoint.",
        "example": {
          "payPal": {
            "paymentInstrumentId": "90271",
            "status": "UNVERIFIED_PERSISTENT",
            "lastUpdated": "2017-10-26T04:56:25.046Z",
            "primary": true,
            "allowed": true,
            "payPalId": "jane.doe@paypal.com",
            "customerId": "690238314"
          }
        }
      },
      "TokenizeGiftcardRequest": {
        "required": [
          "cardNumber",
          "pinCode",
          "primary",
          "save"
        ],
        "type": "object",
        "properties": {
          "cardNumber": {
            "type": "string",
            "description": "The gift card number.",
            "example": "6280003090920742517"
          },
          "pinCode": {
            "type": "string",
            "description": "The gift card pin code.",
            "example": "3196"
          },
          "primary": {
            "type": "boolean",
            "description": "A flag to indicate if this payment instrument has to be set as the primary instrument.",
            "example": true
          },
          "save": {
            "type": "boolean",
            "description": "A flag to indicate if this payment instrument has to be saved in the container or tokenized for one-off use.",
            "example": true
          }
        },
        "description": "The JSON request structure of the Tokenize Giftcard endpoint.",
        "example": {
          "cardNumber": "6280003090920742517",
          "pinCode": "3196",
          "primary": true,
          "save": true
        }
      },
      "TokenizeGiftcardResponse": {
        "required": [
          "balance",
          "expired",
          "expiryDay",
          "expiryMonth",
          "expiryYear",
          "giftCard"
        ],
        "type": "object",
        "properties": {
          "giftCard": {
            "required": [
              "allowed",
              "cardSuffix",
              "lastUpdated",
              "lastUsed",
              "paymentInstrumentId",
              "primary",
              "programName",
              "status"
            ],
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The new payment instrument id to be used for payments.",
                "example": "81054"
              },
              "status": {
                "type": "string",
                "description": "The status of the payment instrument in the container.",
                "enum": [
                  "UNVERIFIED_PERSISTENT",
                  "VERIFIED"
                ]
              },
              "lastUpdated": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                "example": "2017-10-26T06:35:09.083Z"
              },
              "lastUsed": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                "example": "2017-10-12T02:25:49.770Z"
              },
              "primary": {
                "type": "boolean",
                "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                "example": true
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                "example": true
              },
              "programName": {
                "type": "string",
                "description": "The gift card program name.",
                "example": "WISH Gift Card"
              },
              "cardSuffix": {
                "type": "string",
                "description": "The suffix (last 4 digits) of the gift card number.",
                "example": "2517"
              }
            }
          },
          "balance": {
            "type": "number",
            "description": "The current available balance of the gift card.",
            "example": 333.4
          },
          "expiryDay": {
            "type": "string",
            "description": "The day of the expiry date of the gift card.",
            "example": "31"
          },
          "expiryMonth": {
            "type": "string",
            "description": "The month of the expiry date of the gift card.",
            "example": "03"
          },
          "expiryYear": {
            "type": "string",
            "description": "The year of the expiry date of the gift card.",
            "example": "2018"
          },
          "expired": {
            "type": "boolean",
            "description": "A flag to indicate if the gift card is expired.",
            "example": true
          }
        },
        "description": "The JSON response structure of the Tokenize Giftcard endpoint.",
        "example": {
          "giftCard": {
            "paymentInstrumentId": "81054",
            "status": "UNVERIFIED_PERSISTENT",
            "lastUpdated": "2017-10-26T06:35:09.083Z",
            "lastUsed": "2017-10-12T02:25:49.770Z",
            "primary": true,
            "allowed": true,
            "programName": "WISH Gift Card",
            "cardSuffix": "2517"
          },
          "balance": 333.4,
          "expiryDay": "31",
          "expiryMonth": "03",
          "expiryYear": "2018",
          "expired": false
        }
      },
      "GiftcardsBalanceRequest": {
        "type": "object",
        "properties": {
          "giftCards": {
            "type": "array",
            "description": "Use this array if the endpoint is being called with \"cardNumber\" and \"pinCode\" request properties.",
            "items": {
              "required": [
                "cardNumber",
                "pinCode"
              ],
              "type": "object",
              "properties": {
                "cardNumber": {
                  "type": "string",
                  "description": "The gift card number.",
                  "example": "6280003090920742517"
                },
                "pinCode": {
                  "type": "string",
                  "description": "The gift card pin code.",
                  "example": "3196"
                }
              }
            }
          },
          "giftCardInstruments": {
            "type": "array",
            "description": "Use this array if the endpoint is being called with \"paymentInstrumentId\" request properties.",
            "items": {
              "required": [
                "paymentInstrumentId"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The gift card payment instrument id.",
                  "example": "81054"
                }
              }
            }
          }
        },
        "description": "The JSON request structure of the Giftcards Balance endpoint.",
        "example": "By 'cardNumber' and 'pinCode':{    \"giftCards\": [        {            \"cardNumber\": \"6280003090926286519\",            \"pinCode\": \"9101\"        },        {            \"cardNumber\": \"6280005550028790195\",            \"pinCode\": \"4697\"        }    ]}By 'paymentInstrumentId':{    \"giftCardInstruments\": [        {            \"paymentInstrumentId\": \"157363\"        },        {            \"paymentInstrumentId\": \"157374\"        }    ]}"
      },
      "GiftcardsBalanceResponse": {
        "type": "object",
        "properties": {
          "giftCardBalances": {
            "type": "array",
            "items": {
              "required": [
                "balance",
                "expired",
                "expiryDay",
                "expiryMonth",
                "expiryYear"
              ],
              "type": "object",
              "properties": {
                "cardNumber": {
                  "type": "string",
                  "description": "The gift card number. This property will only be returned if the endpoint was called with the \"cardNumber\" and \"pinCode\" request properties.",
                  "example": "6280003090920742517"
                },
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The gift card payment instrument id. This property will only be returned if the endpoint was called with the \"paymentInstrumentId\" request property.",
                  "example": "81054"
                },
                "balance": {
                  "type": "number",
                  "description": "The current available balance of the gift card.",
                  "example": 333.38
                },
                "expiryDay": {
                  "type": "string",
                  "description": "The day of the expiry date of the gift card.",
                  "example": "31"
                },
                "expiryMonth": {
                  "type": "string",
                  "description": "The month of the expiry date of the gift card.",
                  "example": "03"
                },
                "expiryYear": {
                  "type": "string",
                  "description": "The year of the expiry date of the gift card.",
                  "example": "2018"
                },
                "expired": {
                  "type": "boolean",
                  "description": "A flag to indicate if the gift card is expired.",
                  "example": true
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Giftcards Balance endpoint.",
        "example": {
          "giftCardBalances": [
            {
              "cardNumber": "6280003090920742517",
              "paymentInstrumentId": "81054",
              "balance": 333.38,
              "expiryDay": "31",
              "expiryMonth": "03",
              "expiryYear": "2018",
              "expired": false
            }
          ]
        }
      },
      "TokenizeAndroidPayRequest": {
        "required": [
          "comment",
          "encryptedMessage",
          "ephemeralPublicKey",
          "instrumentType",
          "primary",
          "publicKeyHash",
          "tag"
        ],
        "type": "object",
        "properties": {
          "encryptedMessage": {
            "type": "string",
            "description": "The \"encryptedMessage\" value from the Android Pay wallet.",
            "example": "AkG06mqN9YuZKY6gWtXFdOAJUkJtCByrj9boK1UEWIbz"
          },
          "ephemeralPublicKey": {
            "type": "string",
            "description": "The \"ephemeralPublicKey\" value from the Android Pay wallet.",
            "example": "BP38r9n4rE6PtYruJV2IUv2y6ztU10o7="
          },
          "tag": {
            "type": "string",
            "description": "The \"tag\" value from the Android Pay wallet.",
            "example": "oUjJxWs0SbHy4t1P6KETS34xGLr3ZkbJv="
          },
          "publicKeyHash": {
            "type": "string",
            "description": "The \"publicKeyHash\" value from the merchant profile response.",
            "example": "L121Yu2YU6ApskgvSMWg7H0="
          },
          "instrumentType": {
            "type": "string",
            "description": "The type/schema value from the Android Pay wallet.",
            "example": "MASTERCARD"
          },
          "primary": {
            "type": "boolean",
            "description": "A flag to indicate if this payment instrument has to be set as the primary instrument.",
            "example": true
          },
          "comment": {
            "type": "string",
            "description": "The display text returned by the Android Pay wallet.",
            "example": "MASTER-5803"
          }
        },
        "description": "The JSON request structure of the Tokenize Android Pay endpoint.",
        "example": {
          "encryptedMessage": "AkG06mqN9YuZKY6gWtXFdOAJUkJtCByrj9boK1UEWIbz",
          "ephemeralPublicKey": "BP38r9n4rE6PtYruJV2IUv2y6ztU10o7=",
          "tag": "oUjJxWs0SbHy4t1P6KETS34xGLr3ZkbJv=",
          "publicKeyHash": "L121Yu2YU6ApskgvSMWg7H0=",
          "instrumentType": "MASTERCARD",
          "primary": true,
          "comment": "MASTER-5803"
        }
      },
      "TokenizeAndroidPayResponse": {
        "required": [
          "paymentInstrumentId",
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "paymentInstrumentId": {
            "type": "string",
            "description": "The new payment instrument id to be used for payments.",
            "example": "20191"
          },
          "stepUpToken": {
            "type": "string",
            "description": "The step-up token to be used for payments.",
            "example": "6bf0a37c-0a5d-4619-8182-4c331358d021"
          }
        },
        "description": "The JSON response structure of the Tokenize Android Pay endpoint.",
        "example": {
          "paymentInstrumentId": "20191",
          "stepUpToken": "6bf0a37c-0a5d-4619-8182-4c331358d021"
        }
      },
      "TokenizeGooglePayRequest": {
        "required": [
          "comment",
          "instrumentType",
          "tokenData"
        ],
        "type": "object",
        "properties": {
          "instrumentType": {
            "type": "string",
            "description": "The type/schema value from the Google Pay wallet.",
            "example": "AMEX"
          },
          "comment": {
            "type": "string",
            "description": "The display text returned by the Google Pay wallet.",
            "example": "AMEX-5232"
          },
          "tokenData": {
            "type": "string",
            "description": "The \"tokenData\" payload from the Google Pay wallet.",
            "example": "{\\\"protocolVersion\\\":\\\"ECv2\\\",\\\"signature\\\":\\\"MEQCIBec51ti5KFs==\\\",\\\"intermediateSigningKey\\\":{\\\"signatures\\\":[\\\"MEUCIEvA6rkOlThv=\\\"],\\\"signedKey\\\":\\\"{\\\\\\\"keyValue\\\\\\\":\\\\\\\"MFkwEwYHKoZIzj0CAQYI\\\\\\\",\\\\\\\"keyExpiration\\\\\\\":\\\\\\\"1601448494595\\\\\\\"}\\\"},\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"o7raQeRaPE8NxOQuZPro6u\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BMEuZ4HsiNh\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"kfFQwoP5evLtDoh5fTq\\\\\\\"}\\\"}"
          }
        },
        "description": "The JSON request structure of the Tokenize Google Pay endpoint.",
        "example": {
          "instrumentType": "AMEX",
          "comment": "AMEX-5232",
          "tokenData": "{\\\"protocolVersion\\\":\\\"ECv2\\\",\\\"signature\\\":\\\"MEQCIBec51ti5KFs==\\\",\\\"intermediateSigningKey\\\":{\\\"signatures\\\":[\\\"MEUCIEvA6rkOlThv=\\\"],\\\"signedKey\\\":\\\"{\\\\\\\"keyValue\\\\\\\":\\\\\\\"MFkwEwYHKoZIzj0CAQYI\\\\\\\",\\\\\\\"keyExpiration\\\\\\\":\\\\\\\"1601448494595\\\\\\\"}\\\"},\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"o7raQeRaPE8NxOQuZPro6u\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BMEuZ4HsiNh\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"kfFQwoP5evLtDoh5fTq\\\\\\\"}\\\"}"
        }
      },
      "TokenizeGooglePayResponse": {
        "required": [
          "paymentToken"
        ],
        "type": "object",
        "properties": {
          "paymentToken": {
            "type": "string",
            "description": "The new payment token to be used for payments. The payment token is a unique identifier for the payment instrument.",
            "example": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318"
          }
        },
        "description": "The JSON response structure of the Tokenize Google Pay endpoint.",
        "example": {
          "paymentToken": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318"
        }
      },
      "TokenizeApplePayRequest": {
        "required": [
          "applicationData",
          "comment",
          "data",
          "ephemeralPublicKey",
          "instrumentType",
          "primary",
          "publicKeyHash",
          "signature",
          "transactionId",
          "version"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "The \"data\" value from the Apple Pay wallet.",
            "example": "a15owFtcCC6xUY3S9R9qGetYgD0iEW7"
          },
          "ephemeralPublicKey": {
            "type": "string",
            "description": "The \"ephemeralPublicKey\" value from the Apple Pay wallet.",
            "example": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbLF8="
          },
          "publicKeyHash": {
            "type": "string",
            "description": "The \"publicKeyHash\" value from the Apple Pay wallet.",
            "example": "AwqjNEgX2nTIQ9zIbCcA+G9iHOWU4RQ56SrYM="
          },
          "transactionId": {
            "type": "string",
            "description": "The \"transactionId\" value from the Apple Pay wallet.",
            "example": "87a124b4d59d3819c666555ef411c"
          },
          "signature": {
            "type": "string",
            "description": "The \"signature\" value from the Apple Pay wallet.",
            "example": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghk="
          },
          "version": {
            "type": "string",
            "description": "The \"version\" value from the Apple Pay wallet.",
            "example": "EC_V1"
          },
          "instrumentType": {
            "type": "string",
            "description": "The type/schema value from the Apple Pay wallet.",
            "example": "AMEX"
          },
          "primary": {
            "type": "boolean",
            "description": "A flag to indicate if this payment instrument has to be set as the primary instrument.",
            "example": true
          },
          "comment": {
            "type": "string",
            "description": "The display text returned by the Apple Pay wallet.",
            "example": "AMEX-0001"
          },
          "applicationData": {
            "type": "string",
            "description": "The \"applicationData\" value from the Apple Pay wallet.",
            "example": "666555ef411bf515621f"
          }
        },
        "description": "The JSON request structure of the Tokenize Apple Pay endpoint.",
        "example": {
          "data": "a15owFtcCC6xUY3S9R9qGetYgD0iEW7",
          "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbLF8=",
          "publicKeyHash": "AwqjNEgX2nTIQ9zIbCcA+G9iHOWU4RQ56SrYM=",
          "transactionId": "87a124b4d59d3819c666555ef411c",
          "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghk=",
          "version": "EC_V1",
          "instrumentType": "AMEX",
          "primary": true,
          "comment": "AMEX-0001",
          "applicationData": "666555ef411bf515621f"
        }
      },
      "TokenizeApplePayResponse": {
        "required": [
          "paymentInstrumentId",
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "paymentInstrumentId": {
            "type": "string",
            "description": "The new payment instrument id to be used for payments.",
            "example": "20192"
          },
          "stepUpToken": {
            "type": "string",
            "description": "The step-up token to be used for payments.",
            "example": "2d053b14-7c7a-447f-99b7-7618d6182f34"
          }
        },
        "description": "The JSON response structure of the Tokenize Apple Pay endpoint.",
        "example": {
          "paymentInstrumentId": "20192",
          "stepUpToken": "2d053b14-7c7a-447f-99b7-7618d6182f34"
        }
      },
      "ImportPaymentInstrumentsRequest": {
        "required": [
          "shopperId",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The IDM (Gigya) UID or merchant shopper id of the user. Do NOT use an email address!",
            "example": "61ea4c7310df484d91e15cd6ad883ccb"
          },
          "shopperId": {
            "type": "string",
            "description": "The merchant shopper id of the user.",
            "example": "12345"
          },
          "creditCards": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "bin",
                "cardSuffix",
                "orderNumber",
                "transactionRef",
                "transactionTimestamp"
              ],
              "type": "object",
              "properties": {
                "transactionRef": {
                  "type": "string",
                  "description": "WebPay reference in the transaction logs. This number uniquely identifies the transaction in WebPay.",
                  "example": "2000000009719570"
                },
                "transactionTimestamp": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The WebPay transaction timestamp. The timestamp format is ISO8601.",
                  "example": "2017-09-26T23:11:27.000Z"
                },
                "orderNumber": {
                  "type": "string",
                  "description": "The merchant order number used in the WebPay transaction.",
                  "example": "20170505090"
                },
                "bin": {
                  "type": "string",
                  "description": "The bin (first 6 digits) of the credit card number used in the WebPay transaction.",
                  "example": "543048"
                },
                "cardSuffix": {
                  "type": "string",
                  "description": "The suffix (last 4 digits) of the credit card number used in the WebPay transaction.",
                  "example": "4307"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount of the WebPay transaction.",
                  "example": 75.5
                }
              }
            }
          },
          "payPal": {
            "required": [
              "customerId",
              "payPalId",
              "paymentMethodToken"
            ],
            "type": "object",
            "properties": {
              "customerId": {
                "type": "string",
                "description": "The Paypal customer id.",
                "example": "690238314"
              },
              "payPalId": {
                "type": "string",
                "description": "The Paypal email id.",
                "example": "jane.doe@paypal.com"
              },
              "paymentMethodToken": {
                "type": "string",
                "description": "The Paypal payment method token.",
                "example": "I7wME6uOKgsq3fz3y52s"
              }
            }
          }
        },
        "description": "The JSON request structure of the Import Payment Instruments endpoint.",
        "example": {
          "uid": "61ea4c7310df484d91e15cd6ad883ccb",
          "shopperId": "12345",
          "creditCards": [
            {
              "transactionRef": "2000000009719570",
              "transactionTimestamp": "2017-09-26T23:11:27.000Z",
              "orderNumber": "20170505090",
              "bin": "543048",
              "cardSuffix": "4307",
              "amount": 75.5
            }
          ],
          "payPal": {
            "customerId": "690238314",
            "payPalId": "jane.doe@paypal.com",
            "paymentMethodToken": "I7wME6uOKgsq3fz3y52s"
          }
        }
      },
      "ImportPaymentInstrumentsResponse": {
        "required": [
          "shopperId",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The IDM (Gigya) UID or merchant shopper id of the user. Do NOT use an email address!",
            "example": "61ea4c7310df484d91e15cd6ad883ccb"
          },
          "shopperId": {
            "type": "string",
            "description": "The merchant shopper id of the user.",
            "example": "12345"
          },
          "creditCards": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "bin",
                "cardSuffix",
                "errorMessage",
                "expiryMonth",
                "expiryYear",
                "orderNumber",
                "result",
                "transactionRef",
                "transactionResponseCode",
                "transactionResponseText",
                "transactionTimestamp",
                "transactionType"
              ],
              "type": "object",
              "properties": {
                "transactionRef": {
                  "type": "string",
                  "description": "WebPay reference in the transaction logs. This number uniquely identifies the transaction in WebPay.",
                  "example": "2000000009719570"
                },
                "transactionTimestamp": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The WebPay transaction timestamp. The timestamp format is ISO8601.",
                  "example": "2017-09-26T23:11:27.000Z"
                },
                "transactionType": {
                  "type": "string",
                  "description": "The WebPay transaction type.",
                  "example": "PURCHASE"
                },
                "transactionResponseCode": {
                  "type": "string",
                  "description": "The WebPay transaction response code.",
                  "example": "00"
                },
                "transactionResponseText": {
                  "type": "string",
                  "description": "The WebPay transaction response text.",
                  "example": "APPROVED"
                },
                "orderNumber": {
                  "type": "string",
                  "description": "The merchant order number used in the WebPay transaction.",
                  "example": "20170505090"
                },
                "bin": {
                  "type": "string",
                  "description": "The bin (first 6 digits) of the credit card number used in the WebPay transaction.",
                  "example": "543048"
                },
                "cardSuffix": {
                  "type": "string",
                  "description": "The suffix (last 4 digits) of the credit card number used in the WebPay transaction.",
                  "example": "4307"
                },
                "expiryMonth": {
                  "type": "string",
                  "description": "The month of the expiry date of the credit card.",
                  "example": "01"
                },
                "expiryYear": {
                  "type": "string",
                  "description": "The year of the expiry date of the credit card.",
                  "example": "19"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount of the WebPay transaction.",
                  "example": 75.5
                },
                "result": {
                  "type": "string",
                  "description": "The import process result for the credit card instrument.",
                  "enum": [
                    "OK",
                    "DUP",
                    "EXP",
                    "ERROR"
                  ]
                },
                "errorMessage": {
                  "type": "object",
                  "properties": {},
                  "description": "The import process error message if \"result\" is \"ERROR\". Will be null if \"result\" is not \"ERROR\".",
                  "example": null
                }
              }
            }
          },
          "payPal": {
            "required": [
              "customerId",
              "errorMessage",
              "result"
            ],
            "type": "object",
            "properties": {
              "customerId": {
                "type": "string",
                "description": "The Paypal customer id.",
                "example": "690238314"
              },
              "payPalId": {
                "type": "string",
                "description": "The Paypal email id.",
                "example": "jane.doe@paypal.com"
              },
              "paymentMethodToken": {
                "type": "string",
                "description": "The Paypal payment method token.",
                "example": "I7wME6uOKgsq3fz3y52s"
              },
              "result": {
                "type": "string",
                "description": "The import process result for the paypal instrument.",
                "enum": [
                  "OK",
                  "DUP",
                  "EXP",
                  "ERROR"
                ]
              },
              "errorMessage": {
                "type": "object",
                "properties": {},
                "description": "The import process error message if \"result\" is \"ERROR\". Will be null if \"result\" is not \"ERROR\".",
                "example": null
              }
            }
          }
        },
        "description": "The JSON response structure of the Import Payment Instruments endpoint.",
        "example": {
          "uid": "61ea4c7310df484d91e15cd6ad883ccb",
          "shopperId": "12345",
          "creditCards": [
            {
              "transactionRef": "2000000009719570",
              "transactionTimestamp": "2017-09-26T23:11:27.000Z",
              "transactionType": "PURCHASE",
              "transactionResponseCode": "00",
              "transactionResponseText": "APPROVED",
              "orderNumber": "20170505090",
              "bin": "543048",
              "cardSuffix": "4307",
              "expiryMonth": "01",
              "expiryYear": "19",
              "amount": 75.5,
              "result": "OK"
            }
          ],
          "payPal": {
            "customerId": "690238314",
            "payPalId": "jane.doe@paypal.com",
            "paymentMethodToken": "I7wME6uOKgsq3fz3y52s",
            "result": "OK"
          }
        }
      },
      "VerifyPaymentInstrumentsRequest": {
        "required": [
          "clientReference",
          "paymentInstruments"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T5ESYRPWJKPHF54"
          },
          "paymentInstruments": {
            "type": "array",
            "items": {
              "required": [
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token.",
                  "example": "f63fbfa8-0a2f-48a6-9162-6b102161a05b"
                },
                "stepUpToken": {
                  "type": "string",
                  "description": "The step-up token is used to track additional credit card information (eg. CVV and expiry) attached to the payment instrument. It's only valid for a predefined time and if an expired step-up token is used during payment, the payment for that instrument will fail and the user will have to get a new step-up token before retrying the payment. A step-up token is returned in the response of a credit card iframe. This property is currently only required for credit card instruments and only if specific credit card information (eg. CVV and expiry) is required during payment.",
                  "example": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
                }
              }
            }
          },
          "fraudPayload": {
            "required": [
              "format",
              "message",
              "provider",
              "responseFormat",
              "version"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "The fraud check provider.",
                "example": "cybersource"
              },
              "version": {
                "type": "string",
                "description": "The fraud check version.",
                "example": "CyberSourceTransaction_1.101"
              },
              "format": {
                "type": "string",
                "description": "The fraud check message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "responseFormat": {
                "type": "string",
                "description": "The fraud check response message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "message": {
                "type": "string",
                "description": "The fraud check message.",
                "example": "GzbOxpLagX6iFEb7td61cZyA="
              }
            },
            "description": "Set to null to skip the fraud check."
          }
        },
        "description": "The JSON request structure of the Verify Payment Instruments endpoint.",
        "example": {
          "clientReference": "T5ESYRPWJKPHF54",
          "paymentInstruments": [
            {
              "paymentToken": "f63fbfa8-0a2f-48a6-9162-6b102161a05b",
              "stepUpToken": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
            }
          ],
          "fraudPayload": {
            "provider": "cybersource",
            "version": "CyberSourceTransaction_1.101",
            "format": "ZIP_BASE_64_ENCODED",
            "responseFormat": "ZIP_BASE_64_ENCODED",
            "message": "GzbOxpLagX6iFEb7td61cZyA="
          }
        }
      },
      "VerifyPaymentInstrumentsSuccessResponse": {
        "required": [
          "fraudResponse",
          "partialSuccess",
          "transactionReceipt",
          "verifyResponses"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000009303280"
          },
          "partialSuccess": {
            "type": "boolean",
            "description": "Not in use. A property that will be used in future for multi-instrument verification.",
            "example": false
          },
          "fraudResponse": {
            "required": [
              "clientId",
              "decision",
              "reasonCode"
            ],
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "The fraud check client id. Will be null if the fraud check was skipped.",
                "example": "5615334856056397603065"
              },
              "reasonCode": {
                "type": "string",
                "description": "The fraud check reason code. Will be null if the fraud check was skipped.",
                "example": "100"
              },
              "decision": {
                "type": "string",
                "description": "The fraud check decision. Will be null if the fraud check was skipped.",
                "example": "ACCEPT"
              }
            }
          },
          "verifyResponses": {
            "type": "array",
            "items": {
              "required": [
                "externalServiceCode",
                "externalServiceMessage",
                "paymentToken",
                "verifyTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token.",
                  "example": "f63fbfa8-0a2f-48a6-9162-6b102161a05b"
                },
                "verifyTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the transaction in the container.",
                  "example": "1000000009303281"
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "ACCEPTED"
                }
              }
            }
          }
        },
        "description": "The JSON success response structure of the Verify Payment Instruments endpoint.",
        "example": {
          "transactionReceipt": "1000000009303280",
          "partialSuccess": false,
          "fraudResponse": {
            "clientId": "5615334856056397603065",
            "reasonCode": "100",
            "decision": "ACCEPT"
          },
          "verifyResponses": [
            {
              "paymentToken": "f63fbfa8-0a2f-48a6-9162-6b102161a05b",
              "verifyTransactionRef": "1000000009303281",
              "externalServiceCode": "00",
              "externalServiceMessage": "ACCEPTED"
            }
          ]
        }
      },
      "VerifyPaymentInstrumentsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Oops! An unknown error has occurred"
          },
          "verifyResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token.",
                  "example": "f63fbfa8-0a2f-48a6-9162-6b102161a05b"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For credit cards this will be CAPTURE_CVV which identifies that the consumer must capture the CVV prior to payment.",
                      "example": "CAPTURE_CVV"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV or CVV only. The URL will automatically switch between expiry and CVV or CVV only endpoints based on the container requirement.",
                      "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
                    }
                  },
                  "description": "Only present if an error occurred during payment."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          }
        },
        "description": "The JSON error response structure of the Verify Payment Instruments endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "Oops! An unknown error has occurred",
          "verifyResponses": [
            {
              "paymentToken": "f63fbfa8-0a2f-48a6-9162-6b102161a05b",
              "errorCode": "BV57",
              "errorMessage": "ILLEGAL STEP UP TOKEN FOUND",
              "errorDetail": "Illegal stepUpToken found in the system for the payment instrument. Please provide a valid value or contact system support. (Looking up CVV token)",
              "stepUp": {
                "type": "CAPTURE_CVV",
                "mandatory": true,
                "url": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
              },
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ]
        }
      },
      "ListPaymentInstrumentsRequest": {
        "required": [
          "shopperId",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The IDM (Gigya) UID or merchant shopper id of the user. Do NOT use an email address!",
            "example": "61ea4c7310df484d91e15cd6ad883ccb"
          },
          "shopperId": {
            "type": "string",
            "description": "The merchant shopper id of the user.",
            "example": "12345"
          }
        },
        "description": "The JSON request structure of the List Payment Instruments endpoint.",
        "example": {
          "uid": "61ea4c7310df484d91e15cd6ad883ccb",
          "shopperId": "12345"
        }
      },
      "ListPaymentInstrumentsResponse": {
        "required": [
          "androidPay",
          "applePay",
          "creditCards",
          "giftCards",
          "googlePay",
          "payPal",
          "paymentAgreements"
        ],
        "type": "object",
        "properties": {
          "creditCards": {
            "type": "array",
            "items": {
              "required": [
                "allowed",
                "cardName",
                "cardSuffix",
                "cvvValidated",
                "expired",
                "expiryMonth",
                "expiryYear",
                "lastUpdated",
                "lastUsed",
                "paymentInstrumentId",
                "paymentToken",
                "primary",
                "requiresCVV",
                "scheme",
                "status",
                "stepUp",
                "updateURL"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The credit card payment instrument id.",
                  "example": "90731"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The credit card payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "712029a1-c0aa-41bc-a810-3d42424c5834"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the payment instrument in the container.",
                  "enum": [
                    "UNVERIFIED_PERSISTENT",
                    "VERIFIED"
                  ]
                },
                "lastUpdated": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                  "example": "2017-11-06T08:38:09.890Z"
                },
                "lastUsed": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                  "example": "2017-11-06T08:38:09.890Z"
                },
                "primary": {
                  "type": "boolean",
                  "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                  "example": true
                },
                "allowed": {
                  "type": "boolean",
                  "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                  "example": true
                },
                "expiryYear": {
                  "type": "string",
                  "description": "The year of the expiry date of the credit card.",
                  "example": "21"
                },
                "expiryMonth": {
                  "type": "string",
                  "description": "The month of the expiry date of the credit card.",
                  "example": "05"
                },
                "scheme": {
                  "type": "string",
                  "description": "The credit card scheme.",
                  "example": "MASTERCARD"
                },
                "cardSuffix": {
                  "type": "string",
                  "description": "The suffix (last 4 digits) of the credit card number.",
                  "example": "6106"
                },
                "cvvValidated": {
                  "type": "boolean",
                  "description": "A flag to indicate if the CVV of the credit card has been validated.",
                  "example": true
                },
                "cardName": {
                  "type": "string",
                  "description": "The nickname of the credit card instrument in the container.",
                  "example": "My Card"
                },
                "expired": {
                  "type": "boolean",
                  "description": "A flag to indicate if the credit card is expired.",
                  "example": true
                },
                "requiresCVV": {
                  "type": "boolean",
                  "description": "A flag to indicate if payments with this credit card requires a CVV check.",
                  "example": true
                },
                "updateURL": {
                  "type": "string",
                  "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV.",
                  "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvvExpiry/353629ec-4cb5-4fc3-ab47-8c9c3f117ab8/90731"
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For credit cards this will be CAPTURE_CVV which identifies that the consumer must capture the CVV prior to payment.",
                      "example": "CAPTURE_CVV"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV or CVV only. The URL will automatically switch between expiry and CVV or CVV only endpoints based on the container requirement.",
                      "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvvExpiry/353629ec-4cb5-4fc3-ab47-8c9c3f117ab8/90731"
                    }
                  }
                }
              }
            }
          },
          "giftCards": {
            "type": "array",
            "items": {
              "required": [
                "allowed",
                "cardSuffix",
                "lastUpdated",
                "lastUsed",
                "paymentInstrumentId",
                "paymentToken",
                "primary",
                "programName",
                "status"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The gift card payment instrument id.",
                  "example": "81054"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The gift card payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "ec9b062a-220a-43b3-8185-a8ca4fc4dc0c"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the payment instrument in the container.",
                  "enum": [
                    "UNVERIFIED_PERSISTENT",
                    "VERIFIED"
                  ]
                },
                "lastUpdated": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                  "example": "2017-11-06T08:38:09.860Z"
                },
                "lastUsed": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                  "example": "2017-10-12T02:25:49.770Z"
                },
                "primary": {
                  "type": "boolean",
                  "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                  "example": true
                },
                "allowed": {
                  "type": "boolean",
                  "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                  "example": true
                },
                "programName": {
                  "type": "string",
                  "description": "The gift card program name.",
                  "example": "WISH Gift Card"
                },
                "cardSuffix": {
                  "type": "string",
                  "description": "The suffix (last 4 digits) of the gift card number.",
                  "example": "2517"
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For gift cards this will be REQUIRE_PASSCODE which identifies that the consumer must capture the PIN prior to payment.",
                      "example": "REQUIRE_PASSCODE"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "TBD",
                      "example": "https://uat.woolworthspay.com.au/container-ws/tbd"
                    }
                  }
                }
              }
            }
          },
          "payPal": {
            "type": "array",
            "items": {
              "required": [
                "allowed",
                "customerId",
                "lastUpdated",
                "lastUsed",
                "payPalId",
                "paymentInstrumentId",
                "paymentToken",
                "primary",
                "status"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The paypal payment instrument id.",
                  "example": "90271"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The paypal payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "15f774d0-e42e-11e9-a359-2a2ae2dbcce4"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the payment instrument in the container.",
                  "enum": [
                    "UNVERIFIED_PERSISTENT",
                    "VERIFIED"
                  ]
                },
                "lastUpdated": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                  "example": "2017-11-06T08:38:09.860Z"
                },
                "lastUsed": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                  "example": "2017-11-06T08:38:09.860Z"
                },
                "primary": {
                  "type": "boolean",
                  "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                  "example": true
                },
                "allowed": {
                  "type": "boolean",
                  "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                  "example": true
                },
                "payPalId": {
                  "type": "string",
                  "description": "The Paypal email id.",
                  "example": "jane.doe@paypal.com"
                },
                "customerId": {
                  "type": "string",
                  "description": "The Paypal customer id.",
                  "example": "690238314"
                }
              }
            }
          },
          "paymentAgreements": {
            "type": "array",
            "items": {
              "required": [
                "allowed",
                "chargeAmount",
                "chargeCycle",
                "chargeFrequency",
                "endDate",
                "expired",
                "lastUpdated",
                "lastUsed",
                "paymentInstrumentId",
                "paymentToken",
                "primary",
                "startDate",
                "status",
                "type",
                "updateURL"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement.",
                  "example": "27e07e4e-58df-4072-8e75-33dd464af667"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the payment agreement in the container.",
                  "enum": [
                    "UNVERIFIED_PERSISTENT",
                    "VERIFIED"
                  ]
                },
                "lastUpdated": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment agreement was last updated in the container. The timestamp format is ISO8601.",
                  "example": "2018-09-01T00:00:00.000+1100"
                },
                "lastUsed": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The timestamp the payment agreement was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                  "example": "2018-09-14T12:00:00.000+1100"
                },
                "primary": {
                  "type": "boolean",
                  "description": "A flag to indicate if this payment instrument is the primary instrument in the container. Not used for payment agreements.",
                  "example": false
                },
                "allowed": {
                  "type": "boolean",
                  "description": "A flag to indicate if the merchant profile in the container allows the use of this payment agreement.",
                  "example": true
                },
                "type": {
                  "type": "string",
                  "description": "The payment agreement type.",
                  "enum": [
                    "RECURRING",
                    "ADHOC",
                    "INSTALLMENT"
                  ]
                },
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The payment agreement payment instrument id that will be used for the charges.",
                  "example": "90731"
                },
                "scheme": {
                  "type": "string",
                  "description": "The credit card scheme.",
                  "example": "VISA"
                },
                "cardSuffix": {
                  "type": "string",
                  "description": "The suffix (last 4 digits) of the credit card number.",
                  "example": "4405"
                },
                "expiryMonth": {
                  "type": "string",
                  "description": "The month of the expiry date of the credit card.",
                  "example": "11"
                },
                "expiryYear": {
                  "type": "string",
                  "description": "The year of the expiry date of the credit card.",
                  "example": "22"
                },
                "startDate": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The payment agreement start date and time. The timestamp format is ISO8601.",
                  "example": "2018-09-01T00:00:00.000+1100"
                },
                "endDate": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The payment agreement end date and time. The timestamp format is ISO8601.",
                  "example": "2018-12-31T23:59:59.999+1100"
                },
                "chargeFrequency": {
                  "type": "string",
                  "description": "The payment agreement charge frequency.",
                  "enum": [
                    "WEEKLY",
                    "FORTNIGHTLY",
                    "MONTHLY"
                  ]
                },
                "chargeAmount": {
                  "type": "number",
                  "description": "The amount that will be charged at the frequency specified in the payment agreement.",
                  "example": 25.99
                },
                "chargeCycle": {
                  "type": "number",
                  "description": "The current charge cycle number.",
                  "example": 2
                },
                "expired": {
                  "type": "string",
                  "description": "A flag to indicate if the payment agreement is expired.",
                  "example": "false"
                },
                "updateURL": {
                  "type": "string",
                  "description": "The URL of the endpoint to use to update the payment agreement.",
                  "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/paymentagreements/27e07e4e-58df-4072-8e75-33dd464af667"
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For payment agreements this will be CAPTURE_CVV which identifies that the consumer must capture the CVV prior to payment.",
                      "example": "CAPTURE_CVV"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV or CVV only. The URL will automatically switch between expiry and CVV or CVV only endpoints based on the container requirement.",
                      "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvvExpiry/353629ec-4cb5-4fc3-ab47-8c9c3f117ab8/90731"
                    }
                  }
                }
              }
            }
          },
          "androidPay": {
            "type": "object",
            "properties": {},
            "description": "Android Pay has been replaced by Google Pay. This property has been retained for backward compatibility and will always be null.",
            "example": null
          },
          "googlePay": {
            "required": [
              "allowed",
              "expired",
              "lastUpdated",
              "lastUsed",
              "paymentInstrumentId",
              "paymentToken",
              "primary",
              "status"
            ],
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The google pay payment instrument id.",
                "example": "201155"
              },
              "paymentToken": {
                "type": "string",
                "description": "The google pay payment token. The payment token is a unique identifier for the payment instrument.",
                "example": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318"
              },
              "status": {
                "type": "string",
                "description": "The status of the payment instrument in the container.",
                "enum": [
                  "UNVERIFIED_PERSISTENT",
                  "VERIFIED"
                ]
              },
              "lastUpdated": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                "example": "2017-09-20T06:20:18.173Z"
              },
              "lastUsed": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                "example": "2017-07-28T02:58:56.187Z"
              },
              "primary": {
                "type": "boolean",
                "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                "example": true
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                "example": true
              },
              "expired": {
                "type": "boolean",
                "description": "A flag to indicate if the Google Pay token is expired.",
                "example": true
              },
              "stepUp": {
                "required": [
                  "mandatory",
                  "type",
                  "url"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of the step up action. For google pay this will be REFRESH_TOKEN.",
                    "example": "REFRESH_TOKEN"
                  },
                  "mandatory": {
                    "type": "boolean",
                    "description": "A flag to indicate if this step up (action) is mandatory.",
                    "example": true
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL of the endpoint to use to update the google pay token.",
                    "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/googlepay/tokenize/201155"
                  }
                },
                "description": "This object will only be present if the Google Pay token is expired. Check the 'expired' flag for this status."
              }
            }
          },
          "applePay": {
            "required": [
              "allowed",
              "lastUpdated",
              "lastUsed",
              "paymentInstrumentId",
              "paymentToken",
              "primary",
              "status",
              "stepUp"
            ],
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The apple pay payment instrument id.",
                "example": "16161"
              },
              "paymentToken": {
                "type": "string",
                "description": "The apple pay payment token. The payment token is a unique identifier for the payment instrument.",
                "example": "64dee650-e42e-11e9-81b4-2a2ae2dbcce4"
              },
              "status": {
                "type": "string",
                "description": "The status of the payment instrument in the container.",
                "enum": [
                  "UNVERIFIED_PERSISTENT",
                  "VERIFIED"
                ]
              },
              "lastUpdated": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last updated in the container. The timestamp format is ISO8601.",
                "example": "2017-07-28T02:58:56.187Z"
              },
              "lastUsed": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The timestamp the payment instrument was last used in the container. The timestamp format is ISO8601. Will be null if never used.",
                "example": "2017-09-20T06:20:18.173Z"
              },
              "primary": {
                "type": "boolean",
                "description": "A flag to indicate if this payment instrument is the primary instrument in the container.",
                "example": true
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                "example": true
              },
              "stepUp": {
                "required": [
                  "mandatory",
                  "type",
                  "url"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of the step up action. For apple pay this will be REFRESH_TOKEN.",
                    "example": "REFRESH_TOKEN"
                  },
                  "mandatory": {
                    "type": "boolean",
                    "description": "A flag to indicate if this step up (action) is mandatory.",
                    "example": true
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL of the endpoint to use to update the apple pay token.",
                    "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/applepay/tokenize/16161"
                  }
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the List Payment Instruments endpoint.",
        "example": {
          "creditCards": [
            {
              "paymentInstrumentId": "90731",
              "paymentToken": "712029a1-c0aa-41bc-a810-3d42424c5834",
              "status": "UNVERIFIED_PERSISTENT",
              "lastUpdated": "2017-11-06T08:38:09.890Z",
              "lastUsed": "2017-11-06T08:38:09.890Z",
              "primary": true,
              "allowed": true,
              "expiryYear": "21",
              "expiryMonth": "05",
              "scheme": "MASTERCARD",
              "cardSuffix": "6106",
              "cvvValidated": false,
              "cardName": "My Card",
              "expired": false,
              "requiresCVV": true,
              "updateURL": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvvExpiry/353629ec-4cb5-4fc3-ab47-8c9c3f117ab8/90731",
              "stepUp": {
                "type": "CAPTURE_CVV",
                "mandatory": true,
                "url": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/353629ec-4cb5-4fc3-ab47-8c9c3f117ab8/90731"
              }
            }
          ],
          "giftCards": [
            {
              "paymentInstrumentId": "81054",
              "paymentToken": "ec9b062a-220a-43b3-8185-a8ca4fc4dc0c",
              "status": "UNVERIFIED_PERSISTENT",
              "lastUpdated": "2017-11-06T08:38:09.860Z",
              "lastUsed": "2017-10-12T02:25:49.770Z",
              "primary": false,
              "allowed": true,
              "programName": "WISH Gift Card",
              "cardSuffix": "2517",
              "stepUp": {
                "type": "REQUIRE_PASSCODE",
                "mandatory": true,
                "url": "https://uat.woolworthspay.com.au/container-ws/tbd"
              }
            }
          ],
          "payPal": [
            {
              "paymentInstrumentId": "90271",
              "paymentToken": "15f774d0-e42e-11e9-a359-2a2ae2dbcce4",
              "status": "UNVERIFIED_PERSISTENT",
              "lastUpdated": "2017-11-06T08:38:09.860Z",
              "lastUsed": "2017-11-06T08:38:09.860Z",
              "primary": false,
              "allowed": true,
              "payPalId": "jane.doe@paypal.com",
              "customerId": "690238314"
            }
          ],
          "paymentAgreements": [
            {
              "paymentToken": "27e07e4e-58df-4072-8e75-33dd464af667",
              "status": "VERIFIED",
              "lastUpdated": "2018-09-01T00:00:00.000+1100",
              "lastUsed": "2018-09-14T12:00:00.000+1100",
              "primary": false,
              "allowed": true,
              "type": "RECURRING",
              "paymentInstrumentId": "90731",
              "scheme": "VISA",
              "cardSuffix": "4405",
              "expiryMonth": "11",
              "expiryYear": "22",
              "startDate": "2018-09-01T00:00:00.000+1100",
              "endDate": "2018-12-31T23:59:59.999+1100",
              "chargeFrequency": "WEEKLY",
              "chargeAmount": 25.99,
              "chargeCycle": 2,
              "expired": false,
              "updateURL": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/paymentagreements/27e07e4e-58df-4072-8e75-33dd464af667",
              "stepUp": {
                "type": "CAPTURE_CVV",
                "mandatory": true,
                "url": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/353629ec-4cb5-4fc3-ab47-8c9c3f117ab8/90731"
              }
            }
          ],
          "googlePay": {
            "paymentInstrumentId": "201155",
            "paymentToken": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318",
            "status": "VERIFIED",
            "lastUpdated": "2017-09-20T06:20:18.173Z",
            "lastUsed": "2017-07-28T02:58:56.187Z",
            "primary": false,
            "allowed": true,
            "expired": true,
            "stepUp": {
              "type": "REFRESH_TOKEN",
              "mandatory": true,
              "url": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/googlepay/tokenize/201155"
            }
          },
          "applePay": {
            "paymentInstrumentId": "16161",
            "paymentToken": "64dee650-e42e-11e9-81b4-2a2ae2dbcce4",
            "status": "VERIFIED",
            "lastUpdated": "2017-07-28T02:58:56.187Z",
            "lastUsed": "2017-09-20T06:20:18.173Z",
            "primary": false,
            "allowed": true,
            "stepUp": {
              "type": "REFRESH_TOKEN",
              "mandatory": true,
              "url": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/applepay/tokenize/16161"
            }
          }
        }
      },
      "DeletePaymentInstrumentResponse": {
        "type": "object",
        "description": "The JSON response structure of the Delete Payment Instrument endpoint.",
        "example": {}
      },
      "TransactionHistoryRequest": {
        "required": [
          "transactionTypes"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "The container transaction types to include in the results.",
            "items": {
              "type": "string",
              "enum": [
                "PREAUTH",
                "PURCHASE",
                "COMPLETION",
                "VOID",
                "REFUND"
              ]
            }
          },
          "paymentInstrumentIds": {
            "type": "array",
            "description": "The ids of the payment instruments to include in the results.",
            "items": {
              "type": "string",
              "example": "90731"
            }
          },
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number to include in the results.",
            "example": "T5ESYRPWJKPHF54"
          },
          "transactionRef": {
            "type": "string",
            "description": "A container reference number to include in the results.",
            "example": "1000000000670621"
          },
          "orderNumber": {
            "type": "string",
            "description": "A merchant order number to include in the results.",
            "example": "20170505090"
          },
          "startDate": {
            "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "description": "Limit transactions included in the results FROM this timestamp. The timestamp format is ISO8601.",
            "example": "2017-01-01T00:00:00.000+1100"
          },
          "endDate": {
            "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "description": "Limit transactions included in the results TO this timestamp . The timestamp format is ISO8601.",
            "example": "2017-12-31T23:59:59.999+1100"
          },
          "maxRecords": {
            "type": "number",
            "description": "The max number of transactions to include in the results.",
            "example": 2
          }
        },
        "description": "The JSON request structure of the Transaction History endpoint.",
        "example": {
          "transactionTypes": [
            "PREAUTH",
            "PURCHASE"
          ],
          "paymentInstrumentIds": [
            "90731",
            "81054",
            "90271"
          ],
          "clientReference": "T5ESYRPWJKPHF54",
          "transactionRef": "1000000000670621",
          "orderNumber": "20170505090",
          "startDate": "2017-01-01T00:00:00.000+1100",
          "endDate": "2017-12-31T23:59:59.999+1100",
          "maxRecords": 5
        }
      },
      "TransactionHistoryResponse": {
        "required": [
          "returned",
          "total",
          "transactions"
        ],
        "type": "object",
        "properties": {
          "returned": {
            "type": "number",
            "description": "The number of transactions returned in the results.",
            "example": 2
          },
          "total": {
            "type": "number",
            "description": "The total number of transactions available in the container.",
            "example": 6
          },
          "transactions": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "applicationName",
                "applicationRef",
                "bin",
                "cardSuffix",
                "clientReference",
                "comment",
                "network",
                "orderNumber",
                "paymentInstrumentType",
                "transactionRef",
                "transactionTimestamp",
                "transactionType"
              ],
              "type": "object",
              "properties": {
                "transactionType": {
                  "type": "string",
                  "description": "The container transaction type.",
                  "enum": [
                    "PREAUTH",
                    "PURCHASE",
                    "COMPLETION",
                    "VOID",
                    "REFUND"
                  ]
                },
                "transactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the transaction in the container.",
                  "example": "1000000000671560"
                },
                "transactionTimestamp": {
                  "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                  "type": "string",
                  "description": "The container transaction timestamp. The timestamp format is ISO8601.",
                  "example": "2017-11-08T05:06:57.513Z"
                },
                "applicationRef": {
                  "type": "string",
                  "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system. The current implementation assigns the \"clientReference\" value to this property.",
                  "example": "T5ESYRPWJKPHF54"
                },
                "applicationName": {
                  "type": "string",
                  "description": "The container application name of the merchant.",
                  "example": "WowOnline"
                },
                "clientReference": {
                  "type": "string",
                  "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
                  "example": "T5ESYRPWJKPHF54"
                },
                "orderNumber": {
                  "type": "string",
                  "description": "The merchant order number of the transaction.",
                  "example": "20170505090"
                },
                "bin": {
                  "type": "string",
                  "description": "The bin (first 4 digits) of the card number used in the transaction. Will be null for transactions where bin is not applicable.",
                  "example": "5468"
                },
                "network": {
                  "type": "string",
                  "description": "The type of payment instrument used in the transaction. For credit card transactions this property will contain the scheme.",
                  "example": "MASTERCARD"
                },
                "cardSuffix": {
                  "type": "string",
                  "description": "The suffix (last 4 digits) of the card number used in the transaction. Will be null for transactions where suffix is not applicable.",
                  "example": "6106"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount of the transaction.",
                  "example": 20.5
                },
                "comment": {
                  "type": "string",
                  "description": "The comment set in the tokenization request of Google/Apple Pay instruments. Will be null for transactions where comment is not applicable.",
                  "example": "VISA-4405"
                },
                "paymentInstrumentType": {
                  "type": "string",
                  "description": "The type of the payment instrument used in the transaction.",
                  "example": "CREDIT_CARD"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Transaction History endpoint.",
        "example": {
          "returned": 2,
          "total": 6,
          "transactions": [
            {
              "transactionType": "PURCHASE",
              "transactionRef": "1000000000671560",
              "transactionTimestamp": "2017-11-08T05:06:57.513Z",
              "applicationRef": "T5ESYRPWJKPHF54",
              "applicationName": "WowOnline",
              "clientReference": "T5ESYRPWJKPHF54",
              "orderNumber": "20170505090",
              "bin": "5468",
              "network": "MASTERCARD",
              "cardSuffix": "6106",
              "amount": 20.5,
              "paymentInstrumentType": "CREDIT_CARD"
            },
            {
              "transactionType": "PURCHASE",
              "transactionRef": "1000000000670623",
              "transactionTimestamp": "2017-11-07T02:38:27.677Z",
              "applicationRef": "95ORIO45ZMD4ZRF",
              "applicationName": "WowOnline",
              "clientReference": "95ORIO45ZMD4ZRF",
              "orderNumber": "20171107051",
              "network": "GIFT_CARD",
              "cardSuffix": "2517",
              "amount": 1,
              "paymentInstrumentType": "GIFT_CARD"
            }
          ]
        }
      },
      "MerchantProfileResponse": {
        "required": [
          "allowedPaymentMethods"
        ],
        "type": "object",
        "properties": {
          "allowedPaymentMethods": {
            "required": [
              "applePay"
            ],
            "type": "object",
            "properties": {
              "giftCard": {
                "required": [
                  "allowedBins",
                  "pinAlwaysRequired",
                  "serviceStatus"
                ],
                "type": "object",
                "properties": {
                  "allowedBins": {
                    "type": "array",
                    "description": "The gift card bin numbers that are allowed for the relevant merchant. This does not indicate sub-bins, ie. exact gift card programs.",
                    "items": {
                      "type": "string",
                      "example": "628000"
                    }
                  },
                  "serviceStatus": {
                    "type": "string",
                    "description": "This property indicates the status of the gift card service in the container.",
                    "enum": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  },
                  "pinAlwaysRequired": {
                    "type": "boolean",
                    "description": "Flag to indicate if the pin is always required for gift card transactions.",
                    "example": false
                  }
                },
                "description": "The presence of this object in the response indicates that a gift card is an allowed payment method and instrument in the container for the relevant merchant."
              },
              "creditCard": {
                "required": [
                  "allowedNetworks",
                  "allowedTransactionTypes",
                  "serviceStatus"
                ],
                "type": "object",
                "properties": {
                  "allowedNetworks": {
                    "type": "array",
                    "description": "The allowed networks (schemes) for credit card transactions.",
                    "items": {
                      "type": "string",
                      "example": "MASTERCARD"
                    }
                  },
                  "allowedTransactionTypes": {
                    "type": "array",
                    "description": "The allowed transaction types for credit card transactions.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "PREAUTH",
                        "PURCHASE"
                      ]
                    }
                  },
                  "serviceStatus": {
                    "type": "string",
                    "description": "This property indicates the status of the credit card service in the container.",
                    "enum": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  }
                },
                "description": "The presence of this object in the response indicates that a credit card is an allowed payment method and instrument in the container for the relevant merchant."
              },
              "payPal": {
                "required": [
                  "clientToken",
                  "serviceStatus"
                ],
                "type": "object",
                "properties": {
                  "clientToken": {
                    "type": "string",
                    "description": "The paypal client token used for configuration and authorization of paypal transactions.",
                    "example": "eyJ2ZXJzaW9usIn1vIjoib2ZmIn0="
                  },
                  "serviceStatus": {
                    "type": "string",
                    "description": "This property indicates the status of the paypal service in the container.",
                    "enum": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  }
                },
                "description": "The presence of this object in the response indicates that paypal is an allowed payment method and instrument in the container for the relevant merchant."
              },
              "googlePay": {
                "required": [
                  "creditCard",
                  "debitCard",
                  "merchantId",
                  "merchantName",
                  "publicKey",
                  "publicKeyExpiry",
                  "publicKeyHash",
                  "serviceStatus"
                ],
                "type": "object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "The public key required by the Google Pay wallet.",
                    "example": "5HjfYVMvcLN3CakMj3yVzVlYAQ=="
                  },
                  "publicKeyHash": {
                    "type": "string",
                    "description": "The public key hash required by the Google Pay wallet.",
                    "example": "7S7yCA0TpuZ6hoYrdMzZhMQ="
                  },
                  "publicKeyExpiry": {
                    "type": "number",
                    "description": "The expiry timestamp of the public key hash. The timestamp format is milliseconds since epoch.",
                    "example": 1600491347369
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "The merchant id required by the Google Pay wallet.",
                    "example": "11111"
                  },
                  "merchantName": {
                    "type": "string",
                    "description": "The merchant name required by the Google Pay wallet.",
                    "example": "DUMMY"
                  },
                  "creditCard": {
                    "required": [
                      "allowedNetworks",
                      "allowedTransactionTypes"
                    ],
                    "type": "object",
                    "properties": {
                      "allowedNetworks": {
                        "type": "array",
                        "description": "The allowed networks (schemes) for credit card transactions.",
                        "items": {
                          "type": "string",
                          "example": "MASTERCARD"
                        }
                      },
                      "allowedTransactionTypes": {
                        "type": "array",
                        "description": "The allowed transaction types for credit card transactions.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "PREAUTH",
                            "PURCHASE"
                          ]
                        }
                      }
                    }
                  },
                  "debitCard": {
                    "required": [
                      "allowedNetworks",
                      "allowedTransactionTypes"
                    ],
                    "type": "object",
                    "properties": {
                      "allowedNetworks": {
                        "type": "array",
                        "description": "The allowed networks (schemes) for debit card transactions.",
                        "items": {
                          "type": "string",
                          "example": "VISA"
                        }
                      },
                      "allowedTransactionTypes": {
                        "type": "array",
                        "description": "The allowed transaction types for debit card transactions.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "PREAUTH",
                            "PURCHASE"
                          ]
                        }
                      }
                    }
                  },
                  "serviceStatus": {
                    "type": "string",
                    "description": "This property indicates the status of the google pay service in the container.",
                    "enum": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  }
                },
                "description": "The presence of this object in the response indicates that google pay is an allowed payment method and instrument in the container for the relevant merchant."
              },
              "applePay": {
                "required": [
                  "creditCard",
                  "debitCard",
                  "serviceStatus"
                ],
                "type": "object",
                "properties": {
                  "creditCard": {
                    "required": [
                      "allowedNetworks",
                      "allowedTransactionTypes"
                    ],
                    "type": "object",
                    "properties": {
                      "allowedNetworks": {
                        "type": "array",
                        "description": "The allowed networks (schemes) for credit card transactions.",
                        "items": {
                          "type": "string",
                          "example": "MASTERCARD"
                        }
                      },
                      "allowedTransactionTypes": {
                        "type": "array",
                        "description": "The allowed transaction types for credit card transactions.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "PREAUTH",
                            "PURCHASE"
                          ]
                        }
                      }
                    }
                  },
                  "debitCard": {
                    "required": [
                      "allowedNetworks",
                      "allowedTransactionTypes"
                    ],
                    "type": "object",
                    "properties": {
                      "allowedNetworks": {
                        "type": "array",
                        "description": "The allowed networks (schemes) for debit card transactions.",
                        "items": {
                          "type": "string",
                          "example": "VISA"
                        }
                      },
                      "allowedTransactionTypes": {
                        "type": "array",
                        "description": "The allowed transaction types for debit card transactions.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "PREAUTH",
                            "PURCHASE"
                          ]
                        }
                      }
                    }
                  },
                  "serviceStatus": {
                    "type": "string",
                    "description": "This property indicates the status of the apple pay service in the container.",
                    "enum": [
                      "ENABLED",
                      "DISABLED"
                    ]
                  }
                },
                "description": "The presence of this object in the response indicates that apple pay is an allowed payment method and instrument in the container for the relevant merchant."
              }
            }
          }
        },
        "description": "The JSON response structure of the Merchant Profile endpoint.",
        "example": {
          "allowedPaymentMethods": {
            "giftCard": {
              "allowedBins": [
                "628000"
              ],
              "serviceStatus": "ENABLED",
              "pinAlwaysRequired": false
            },
            "creditCard": {
              "allowedNetworks": [
                "AMEX",
                "MASTERCARD",
                "JCB",
                "VISA",
                "DINERS"
              ],
              "allowedTransactionTypes": [
                "PREAUTH",
                "PURCHASE"
              ],
              "serviceStatus": "ENABLED"
            },
            "payPal": {
              "clientToken": "eyJ2ZXJzaW9uIjoyLCJhdXRob3Jpem=",
              "serviceStatus": "ENABLED"
            },
            "googlePay": {
              "publicKey": "5HjfYVMvcLN3CakMj3yVzVlYAQ==",
              "publicKeyHash": "7S7yCA0TpuZ6hoYrdMzZhMQ=",
              "publicKeyExpiry": 1600491347369,
              "merchantId": "11111",
              "merchantName": "DUMMY",
              "creditCard": {
                "allowedNetworks": [
                  "AMEX",
                  "MASTERCARD",
                  "VISA"
                ],
                "allowedTransactionTypes": [
                  "PURCHASE",
                  "PREAUTH"
                ]
              },
              "debitCard": {
                "allowedNetworks": [],
                "allowedTransactionTypes": [
                  "PURCHASE",
                  "PREAUTH"
                ]
              },
              "serviceStatus": "ENABLED"
            },
            "applePay": {
              "creditCard": {
                "allowedNetworks": [
                  "AMEX",
                  "MASTERCARD",
                  "VISA"
                ],
                "allowedTransactionTypes": [
                  "PREAUTH",
                  "PURCHASE"
                ]
              },
              "debitCard": {
                "allowedNetworks": [],
                "allowedTransactionTypes": [
                  "PREAUTH",
                  "PURCHASE"
                ]
              },
              "serviceStatus": "ENABLED"
            }
          }
        }
      },
      "DeleteWalletRequest": {
        "required": [
          "shopperId",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The IDM (Gigya) UID or merchant shopper id of the user. Do NOT use an email address!",
            "example": "61ea4c7310df484d91e15cd6ad883ccb"
          },
          "shopperId": {
            "type": "string",
            "description": "The merchant shopper id of the user.",
            "example": "12345"
          }
        },
        "description": "The JSON request structure of the Delete Wallet endpoint.",
        "example": {
          "uid": "61ea4c7310df484d91e15cd6ad883ccb",
          "shopperId": "12345"
        }
      },
      "DeleteWalletResponse": {
        "type": "object",
        "description": "The JSON response structure of the Delete Wallet endpoint.",
        "example": {}
      },
      "GuestTokenizePaypalRequest": {
        "required": [
          "nonce"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string",
            "description": "The Paypal nonce that will be used during a Paypal payment.",
            "example": "d5e2986b-ffd5-03af-1bee-ff2dc1e83a56"
          }
        },
        "description": "The JSON request structure of the Guest Tokenize Paypal endpoint.",
        "example": {
          "nonce": "d5e2986b-ffd5-03af-1bee-ff2dc1e83a56"
        }
      },
      "GuestTokenizePaypalResponse": {
        "required": [
          "payPal"
        ],
        "type": "object",
        "properties": {
          "payPal": {
            "required": [
              "allowed",
              "paymentInstrumentId",
              "status"
            ],
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The new payment instrument id to be used for payments.",
                "example": "533c3a92-56a0-4b17-b21d-454a6b383dab"
              },
              "status": {
                "type": "string",
                "description": "The status of the payment instrument in the container.",
                "enum": [
                  "UNVERIFIED_TRANSIENT"
                ]
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                "example": true
              }
            }
          }
        },
        "description": "The JSON response structure of the Guest Tokenize Paypal endpoint.",
        "example": {
          "payPal": {
            "paymentInstrumentId": "533c3a92-56a0-4b17-b21d-454a6b383dab",
            "status": "UNVERIFIED_TRANSIENT",
            "allowed": true
          }
        }
      },
      "GuestTokenizeGiftcardRequest": {
        "required": [
          "cardNumber",
          "pinCode"
        ],
        "type": "object",
        "properties": {
          "cardNumber": {
            "type": "string",
            "description": "The gift card number.",
            "example": "6280003090920742517"
          },
          "pinCode": {
            "type": "string",
            "description": "The gift card pin code.",
            "example": "3196"
          }
        },
        "description": "The JSON request structure of the Guest Tokenize Giftcard endpoint.",
        "example": {
          "cardNumber": "6280003090920742517",
          "pinCode": "3196"
        }
      },
      "GuestTokenizeGiftcardResponse": {
        "required": [
          "balance",
          "expired",
          "expiryDay",
          "expiryMonth",
          "expiryYear",
          "giftCard"
        ],
        "type": "object",
        "properties": {
          "giftCard": {
            "required": [
              "allowed",
              "cardSuffix",
              "paymentInstrumentId",
              "programName",
              "status"
            ],
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The new payment instrument id to be used for payments.",
                "example": "ac1a0c57-e1c8-43cd-afdc-cf60dd359aa5"
              },
              "status": {
                "type": "string",
                "description": "The status of the payment instrument in the container.",
                "enum": [
                  "UNVERIFIED_TRANSIENT"
                ]
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag to indicate if the merchant profile in the container allows the use of this payment instrument.",
                "example": true
              },
              "programName": {
                "type": "string",
                "description": "The gift card program name.",
                "example": "WISH Gift Card"
              },
              "cardSuffix": {
                "type": "string",
                "description": "The suffix (last 4 digits) of the gift card number.",
                "example": "2517"
              }
            }
          },
          "balance": {
            "type": "number",
            "description": "The current available balance of the gift card.",
            "example": 333.4
          },
          "expiryDay": {
            "type": "string",
            "description": "The day of the expiry date of the gift card.",
            "example": "31"
          },
          "expiryMonth": {
            "type": "string",
            "description": "The month of the expiry date of the gift card.",
            "example": "03"
          },
          "expiryYear": {
            "type": "string",
            "description": "The year of the expiry date of the gift card.",
            "example": "2018"
          },
          "expired": {
            "type": "boolean",
            "description": "A flag to indicate if the gift card is expired.",
            "example": true
          }
        },
        "description": "The JSON response structure of the Guest Tokenize Giftcard endpoint.",
        "example": {
          "giftCard": {
            "paymentInstrumentId": "ac1a0c57-e1c8-43cd-afdc-cf60dd359aa5",
            "status": "UNVERIFIED_TRANSIENT",
            "allowed": true,
            "programName": "WISH Gift Card",
            "cardSuffix": "2517"
          },
          "balance": 333.4,
          "expiryDay": "31",
          "expiryMonth": "03",
          "expiryYear": "2018",
          "expired": false
        }
      },
      "GuestTokenizeApplePayRequest": {
        "required": [
          "applicationData",
          "comment",
          "data",
          "ephemeralPublicKey",
          "instrumentType",
          "publicKeyHash",
          "signature",
          "transactionId",
          "version"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "The \"data\" value from the Apple Pay wallet.",
            "example": "a15owFtcCC6xUY3S9R9qGetYgD0iEW7"
          },
          "ephemeralPublicKey": {
            "type": "string",
            "description": "The \"ephemeralPublicKey\" value from the Apple Pay wallet.",
            "example": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbLF8="
          },
          "publicKeyHash": {
            "type": "string",
            "description": "The \"publicKeyHash\" value from the Apple Pay wallet.",
            "example": "AwqjNEgX2nTIQ9zIbCcA+G9iHOWU4RQ56SrYM="
          },
          "transactionId": {
            "type": "string",
            "description": "The \"transactionId\" value from the Apple Pay wallet.",
            "example": "87a124b4d59d3819c666555ef411c"
          },
          "signature": {
            "type": "string",
            "description": "The \"signature\" value from the Apple Pay wallet.",
            "example": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghk="
          },
          "version": {
            "type": "string",
            "description": "The \"version\" value from the Apple Pay wallet.",
            "example": "EC_V1"
          },
          "instrumentType": {
            "type": "string",
            "description": "The type/schema value from the Apple Pay wallet.",
            "example": "AMEX"
          },
          "comment": {
            "type": "string",
            "description": "The display text returned by the Apple Pay wallet.",
            "example": "AMEX-0001"
          },
          "applicationData": {
            "type": "string",
            "description": "The \"applicationData\" value from the Apple Pay wallet.",
            "example": "666555ef411bf515621f"
          }
        },
        "description": "The JSON request structure of the Guest Tokenize Apple Pay endpoint.",
        "example": {
          "data": "a15owFtcCC6xUY3S9R9qGetYgD0iEW7",
          "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbLF8=",
          "publicKeyHash": "AwqjNEgX2nTIQ9zIbCcA+G9iHOWU4RQ56SrYM=",
          "transactionId": "87a124b4d59d3819c666555ef411c",
          "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghk=",
          "version": "EC_V1",
          "instrumentType": "AMEX",
          "comment": "AMEX-0001",
          "applicationData": "666555ef411bf515621f"
        }
      },
      "PaymentsRequest": {
        "required": [
          "clientReference",
          "orderNumber",
          "payments",
          "transactionType"
        ],
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "object",
            "properties": {
              "creditCard": {
                "type": "string",
                "description": "The container transaction type to use for credit card instruments. This property is only required if the payments request contains credit card instruments.",
                "enum": [
                  "PREAUTH",
                  "PURCHASE"
                ]
              },
              "giftCard": {
                "type": "string",
                "description": "The container transaction type to use for gift card instruments. This property is only required if the payments request contains gift card instruments.",
                "enum": [
                  "PREAUTH",
                  "PURCHASE"
                ]
              },
              "payPal": {
                "type": "string",
                "description": "The container transaction type to use for paypal instruments. This property is only required if the payments request contains paypal instruments. Only PURCHASE is currently supported for paypal instruments.",
                "enum": [
                  "PURCHASE"
                ]
              },
              "googlePay": {
                "required": [
                  "creditCard",
                  "debitCard"
                ],
                "type": "object",
                "properties": {
                  "creditCard": {
                    "type": "string",
                    "description": "The container transaction type to use for google pay credit card instruments.",
                    "enum": [
                      "PREAUTH",
                      "PURCHASE"
                    ]
                  },
                  "debitCard": {
                    "type": "string",
                    "description": "The container transaction type to use for google pay debit card instruments. Only PURCHASE is currently supported for google pay debit card instruments.",
                    "enum": [
                      "PURCHASE"
                    ]
                  }
                },
                "description": "This object is only required if the payments request contains google pay instruments."
              },
              "applePay": {
                "required": [
                  "creditCard",
                  "debitCard"
                ],
                "type": "object",
                "properties": {
                  "creditCard": {
                    "type": "string",
                    "description": "The container transaction type to use for apple pay credit card instruments.",
                    "enum": [
                      "PREAUTH",
                      "PURCHASE"
                    ]
                  },
                  "debitCard": {
                    "type": "string",
                    "description": "The container transaction type to use for apple pay debit card instruments. Only PURCHASE is currently supported for apple pay debit card instruments.",
                    "enum": [
                      "PURCHASE"
                    ]
                  }
                },
                "description": "This object is only required if the payments request contains apple pay instruments."
              }
            }
          },
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T5ESYRPWJKPHF54"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "shippingAddress": {
            "required": [
              "countryCode",
              "firstName",
              "lastName",
              "postalCode",
              "stateOrTerritory",
              "streetAddress",
              "suburb"
            ],
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "The recipient's first name.",
                "example": "Francois"
              },
              "lastName": {
                "type": "string",
                "description": "The recipient's last name.",
                "example": "van der Merwe"
              },
              "email": {
                "type": "string",
                "description": "The recipient’s email address.",
                "example": "fvandermerwe@woolworths.com.au"
              },
              "company": {
                "type": "string",
                "description": "The recipient's company name.",
                "example": "Woolworths Limited"
              },
              "extendedAddress": {
                "type": "string",
                "description": "The recipient's extended address line.",
                "example": "Level 1"
              },
              "streetAddress": {
                "type": "string",
                "description": "The recipient's street address line.",
                "example": "22 River Oak Circuit"
              },
              "suburb": {
                "type": "string",
                "description": "The recipient's suburb.",
                "example": "Kellyville"
              },
              "stateOrTerritory": {
                "type": "string",
                "description": "The recipient's abbreviated state or territory.",
                "example": "NSW"
              },
              "postalCode": {
                "type": "string",
                "description": "The recipient's postal code",
                "example": "2155"
              },
              "countryCode": {
                "type": "string",
                "description": "The recipient's Alpha-2 (2-character) ISO-3166-1 country code.",
                "example": "AU"
              }
            },
            "description": "This object is only required if the payments request contains paypal instruments."
          },
          "payments": {
            "type": "array",
            "items": {
              "required": [
                "paymentInstrumentId",
                "paymentToken",
                "amount"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The payment instrument id from the card capture iframe response or the list payment instruments response. This property can be omitted if the payment token property is present.",
                  "example": "90731"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token from the card capture iframe response or the list payment instruments response. This property can be omitted if the payment instrument id property is present.",
                  "example": "712029a1-c0aa-41bc-a810-3d42424c5834"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount you want to pay with the payment instrument.",
                  "example": 20.5
                },
                "stepUpToken": {
                  "type": "string",
                  "description": "The step-up token is used to track additional credit card information (eg. CVV and expiry) attached to the payment instrument. It's only valid for a predefined time and if an expired step-up token is used during payment, the payment for that instrument will fail and the user will have to get a new step-up token before retrying the payment. A step-up token is returned in the response of a credit card iframe. This property is currently only required for credit card instruments and only if specific credit card information (eg. CVV and expiry) is required during payment.",
                  "example": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
                },
                "passcode": {
                  "type": "string",
                  "description": "The passcode is used to send additional information (eg. gift card PIN) for the payment instrument. This property is currently only required for gift card instruments and only if the gift card PIN is required during payment. This property should NOT be used with credit card instruments (see stepUpToken).",
                  "example": "1425"
                }
              }
            }
          },
          "extendedMerchantData": {
            "type": "array",
            "description": "This object is only required if the payments request contains paypal instruments.",
            "items": {
              "required": [
                "field",
                "value"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The name of the extended merchant data field.",
                  "enum": [
                    "correlationId"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "The value of the extended merchant data field.",
                  "example": "23f585945be2f"
                }
              }
            }
          },
          "storeData": {
            "required": [
              "rrn",
              "storeId",
              "transactionTimestamp"
            ],
            "type": "object",
            "properties": {
              "storeId": {
                "type": "string",
                "description": "The in-store payment transaction store id.",
                "example": "4952110"
              },
              "rrn": {
                "maxLength": 12,
                "minLength": 12,
                "type": "string",
                "description": "The in-store payment transaction store id. This is a 12 digit \"0\" [zero] padded numeric string.",
                "example": "000000006564"
              },
              "transactionTimestamp": {
                "type": "number",
                "description": "The in-store payment transaction timestamp. The timestamp format is milliseconds since epoch.",
                "example": 1528264660639
              }
            },
            "description": "This object is only required if the payments request is for an in-store (R10) payment transaction."
          },
          "fraudPayload": {
            "required": [
              "format",
              "message",
              "provider",
              "responseFormat",
              "version"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "The fraud check provider.",
                "example": "cybersource"
              },
              "version": {
                "type": "string",
                "description": "The fraud check version.",
                "example": "CyberSourceTransaction_1.101"
              },
              "format": {
                "type": "string",
                "description": "The fraud check message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "responseFormat": {
                "type": "string",
                "description": "The fraud check response message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "message": {
                "type": "string",
                "description": "The fraud check message.",
                "example": "GzbOxpLagX6iFEb7td61cZyA="
              }
            },
            "description": "Set to null to skip the cybersource fraud check."
          }
        },
        "description": "The JSON request structure of the Payments endpoint.",
        "example": {
          "transactionType": {
            "creditCard": "PREAUTH",
            "giftCard": "PURCHASE",
            "payPal": "PURCHASE",
            "googlePay": {
              "creditCard": "PREAUTH",
              "debitCard": "PURCHASE"
            },
            "applePay": {
              "creditCard": "PREAUTH",
              "debitCard": "PURCHASE"
            }
          },
          "clientReference": "T5ESYRPWJKPHF54",
          "orderNumber": "20170505090",
          "shippingAddress": {
            "firstName": "Francois",
            "lastName": "van der Merwe",
            "email": "fvandermerwe@woolworths.com.au",
            "company": "Woolworths Limited",
            "extendedAddress": "Level 1",
            "streetAddress": "22 River Oak Circuit",
            "suburb": "Kellyville",
            "stateOrTerritory": "NSW",
            "postalCode": "2155",
            "countryCode": "AU"
          },
          "payments": [
            {
              "paymentInstrumentId": "90731",
              "amount": 20.5,
              "stepUpToken": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
            },
            {
              "paymentToken": "712029a1-c0aa-41bc-a810-3d42424c5834",
              "amount": 20.5,
              "stepUpToken": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
            },
            {
              "paymentInstrumentId": "81054",
              "amount": 1,
              "passcode": "1425"
            },
            {
              "paymentInstrumentId": "90271",
              "amount": 15
            }
          ],
          "extendedMerchantData": [
            {
              "field": "correlationId",
              "value": "23f585945be2f"
            }
          ],
          "storeData": {
            "storeId": "4952110",
            "rrn": "000000006564",
            "transactionTimestamp": 1528264660639
          },
          "fraudPayload": {
            "provider": "cybersource",
            "version": "CyberSourceTransaction_1.101",
            "format": "ZIP_BASE_64_ENCODED",
            "responseFormat": "ZIP_BASE_64_ENCODED",
            "message": "GzbOxpLagX6iFEb7td61cZyA="
          }
        }
      },
      "PaymentsSuccessResponse": {
        "required": [
          "androidPay",
          "applePay",
          "creditCards",
          "fraudResponse",
          "giftCards",
          "googlePay",
          "partialSuccess",
          "payPal",
          "transactionReceipt",
          "unknown"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670621"
          },
          "partialSuccess": {
            "type": "boolean",
            "description": "A flag to indicate if a split payment was only partially successful, ie. at least 1 of the payment instruments had a successful payment result.",
            "example": true
          },
          "fraudResponse": {
            "required": [
              "clientId",
              "decision",
              "reasonCode"
            ],
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "The fraud check client id. Will be null if the fraud check was skipped.",
                "example": "5017321752216948403009"
              },
              "reasonCode": {
                "type": "string",
                "description": "The fraud check reason code. Will be null if the fraud check was skipped.",
                "example": "480"
              },
              "decision": {
                "type": "string",
                "description": "The fraud check decision. Will be null if the fraud check was skipped.",
                "example": "REVIEW"
              }
            }
          },
          "creditCards": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The credit card payment instrument id.",
                  "example": "90731"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The credit card payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "712029a1-c0aa-41bc-a810-3d42424c5834"
                },
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For credit cards this will be CAPTURE_CVV which identifies that the consumer must capture the CVV prior to payment.",
                      "example": "CAPTURE_CVV"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV or CVV only. The URL will automatically switch between expiry and CVV or CVV only endpoints based on the container requirement.",
                      "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
                    }
                  },
                  "description": "Only present if an error occurred during payment."
                },
                "receiptData": {
                  "required": [
                    "cardSuffix",
                    "expiryMonth",
                    "expiryYear",
                    "scheme"
                  ],
                  "type": "object",
                  "properties": {
                    "cardSuffix": {
                      "type": "string",
                      "description": "The suffix (last 4 digits) of the credit card number used in the WebPay transaction.",
                      "example": "6106"
                    },
                    "scheme": {
                      "type": "string",
                      "description": "The credit card scheme.",
                      "example": "MASTERCARD"
                    },
                    "expiryMonth": {
                      "type": "string",
                      "description": "The month of the expiry date of the credit card.",
                      "example": "05"
                    },
                    "expiryYear": {
                      "type": "string",
                      "description": "The year of the expiry date of the credit card.",
                      "example": "21"
                    }
                  },
                  "description": "This object is only included in the response if it is enabled in the consumers API configuration."
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field. The 'token' field is only included in the response if it is enabled in the consumers API configuration.",
                        "enum": [
                          "bin",
                          "stan",
                          "rrn",
                          "token",
                          "mid",
                          "terminalId"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "401200"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                },
                "handlingInstructions": {
                  "required": [
                    "instructionCode",
                    "instructionMessage"
                  ],
                  "type": "object",
                  "properties": {
                    "instructionCode": {
                      "type": "string",
                      "description": "The handling instruction code.",
                      "enum": [
                        "100",
                        "110",
                        "120"
                      ]
                    },
                    "instructionMessage": {
                      "type": "string",
                      "description": "The handling instruction message.",
                      "example": "Immediate Completion"
                    }
                  },
                  "description": "Special handling instructions that have to be executed after a payment. Only present if no error occurred during payment."
                }
              }
            }
          },
          "giftCards": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The gift card payment instrument id.",
                  "example": "81054"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The gift card payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "ec9b062a-220a-43b3-8185-a8ca4fc4dc0c"
                },
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the gift card transaction in the container.",
                  "example": "1000000000670623"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For gift cards this will be REQUIRE_PASSCODE which identifies that the consumer must capture the PIN prior to payment.",
                      "example": "REQUIRE_PASSCODE"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "TBD",
                      "example": "https://uat.woolworthspay.com.au/container-ws/tbd"
                    }
                  }
                },
                "receiptData": {
                  "required": [
                    "cardSuffix"
                  ],
                  "type": "object",
                  "properties": {
                    "cardSuffix": {
                      "type": "string",
                      "description": "The suffix (last 4 digits) of the gift card number used in the WEX transaction.",
                      "example": "2517"
                    }
                  },
                  "description": "This object is only included in the response if it is enabled in the consumers API configuration."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. WEX). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. WEX). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          },
          "payPal": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The paypal payment instrument id.",
                  "example": "90271"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The paypal payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "15f774d0-e42e-11e9-a359-2a2ae2dbcce4"
                },
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the paypal transaction in the container.",
                  "example": "1000000000670624"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "receiptData": {
                  "required": [
                    "customerId",
                    "payPalId"
                  ],
                  "type": "object",
                  "properties": {
                    "payPalId": {
                      "type": "string",
                      "description": "The Paypal email id.",
                      "example": "jane.doe@paypal.com"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "The Paypal customer id.",
                      "example": "690238314"
                    }
                  },
                  "description": "This object is only included in the response if it is enabled in the consumers API configuration."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. PayPal). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. PayPal). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          },
          "androidPay": {
            "type": "array",
            "description": "Android Pay has been replaced by Google Pay. This property has been retained for backward compatibility and will always be an empty array.",
            "items": {
              "type": "object",
              "properties": {},
              "example": "[]"
            }
          },
          "googlePay": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The google pay payment instrument id.",
                  "example": "90953"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The google pay payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318"
                },
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the google pay transaction in the container.",
                  "example": "1000000000670625"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For google pay this will be REFRESH_TOKEN.",
                      "example": "REFRESH_TOKEN"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the endpoint to use to update the google pay token.",
                      "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/googlepay/tokenize/90953"
                    }
                  }
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field.",
                        "enum": [
                          "bin"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "376445"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Google Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "100"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Google Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "ACCEPT"
                }
              }
            }
          },
          "applePay": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The apple pay payment instrument id.",
                  "example": "90375"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The apple pay payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "64dee650-e42e-11e9-81b4-2a2ae2dbcce4"
                },
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the apple pay transaction in the container.",
                  "example": "1000000000670626"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For apple pay this will be REFRESH_TOKEN.",
                      "example": "REFRESH_TOKEN"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the endpoint to use to update the apple pay token.",
                      "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/applepay/tokenize/90375"
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Apple Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Apple Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          },
          "unknown": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The unknown payment instrument id.",
                  "example": "90945"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token. The payment token is a unique identifier for the payment instrument. Will be null if the payment instrument is not valid.",
                  "example": null
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                }
              }
            }
          }
        },
        "description": "The JSON success response structure of the Payments endpoint.",
        "example": "Complete Success:{    \"transactionReceipt\": \"1000000000670621\",    \"partialSuccess\": false,    \"fraudResponse\": {        \"clientId\": \"5017321752216948403009\",        \"reasonCode\": \"480\",        \"decision\": \"REVIEW\"    },    \"creditCards\": [        {            \"paymentInstrumentId\": \"90731\",            \"paymentToken\": \"712029a1-c0aa-41bc-a810-3d42424c5834\",            \"paymentTransactionRef\": \"1000000000670622\",            \"receiptData\": {                \"cardSuffix\": \"6106\",                \"scheme\": \"MASTERCARD\",                \"expiryMonth\": \"05\",                \"expiryYear\": \"21\"            },            \"extendedTransactionData\": [                {                    \"field\": \"bin\",                    \"value\": \"401200\"                },                {                    \"field\": \"stan\",                    \"value\": \"001675\"                },                {                    \"field\": \"rrn\",                    \"value\": \"000000000076\"                },                {                    \"field\": \"token\",                    \"value\": \"40120080000200000928\"                },                {                    \"field\": \"mid\",                    \"value\": \"611000602006135\"                },                {                    \"field\": \"terminalId\",                    \"value\": \"W6135100\"                }            ],            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\",            \"handlingInstructions\": {                \"instructionCode\": \"110\",                \"instructionMessage\": \"Immediate Completion\"            }        }    ],    \"giftCards\": [        {            \"paymentInstrumentId\": \"81054\",            \"paymentToken\": \"ec9b062a-220a-43b3-8185-a8ca4fc4dc0c\",            \"paymentTransactionRef\": \"1000000000670623\",            \"receiptData\": {                \"cardSuffix\": \"2517\"            },            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        }    ],    \"payPal\": [        {            \"paymentInstrumentId\": \"90271\",            \"paymentToken\": \"15f774d0-e42e-11e9-a359-2a2ae2dbcce4\",            \"paymentTransactionRef\": \"1000000000670624\",            \"receiptData\": {                \"payPalId\": \"jane.doe@paypal.com\",                \"customerId\": \"690238314\"            },            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        }    ],    \"androidPay\": [],    \"googlePay\": [        {            \"paymentInstrumentId\": \"90953\",            \"paymentToken\": \"76a4c2f1-7620-4bc4-8f4f-01c1467ea318\",            \"paymentTransactionRef\": \"1000000000670625\",            \"extendedTransactionData\": [                {                    \"field\": \"bin\",                    \"value\": \"376445\"                }            ],            \"externalServiceCode\": \"100\",            \"externalServiceMessage\": \"ACCEPT\"        }    ],    \"applePay\": [        {            \"paymentInstrumentId\": \"90375\",            \"paymentToken\": \"64dee650-e42e-11e9-81b4-2a2ae2dbcce4\",            \"paymentTransactionRef\": \"1000000000670626\",            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        }    ],    \"unknown\": []}Partial Success:{    \"transactionReceipt\": \"1000000000670621\",    \"partialSuccess\": true,    \"fraudResponse\": {        \"clientId\": \"5017321752216948403009\",        \"reasonCode\": \"480\",        \"decision\": \"REVIEW\"    },    \"creditCards\": [        {            \"paymentInstrumentId\": \"90731\",            \"paymentToken\": \"712029a1-c0aa-41bc-a810-3d42424c5834\",            \"paymentTransactionRef\": \"1000000000670622\",            \"receiptData\": {                \"cardSuffix\": \"6106\",                \"scheme\": \"MASTERCARD\",                \"expiryMonth\": \"05\",                \"expiryYear\": \"21\"            },            \"extendedTransactionData\": [                {                    \"field\": \"bin\",                    \"value\": \"401200\"                },                {                    \"field\": \"stan\",                    \"value\": \"001675\"                },                {                    \"field\": \"rrn\",                    \"value\": \"000000000076\"                },                {                    \"field\": \"token\",                    \"value\": \"40120080000200000928\"                },                {                    \"field\": \"mid\",                    \"value\": \"611000602006135\"                },                {                    \"field\": \"terminalId\",                    \"value\": \"W6135100\"                }            ],            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\",            \"handlingInstructions\": {                \"instructionCode\": \"110\",                \"instructionMessage\": \"Immediate Completion\"            }        }    ],    \"giftCards\": [        {            \"paymentInstrumentId\": \"81054\",            \"paymentToken\": \"ec9b062a-220a-43b3-8185-a8ca4fc4dc0c\",            \"errorCode\": \"UN99\",            \"errorMessage\": \"UNEXPECTED SYSTEM FAILURE\",            \"errorDetail\": \"We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)\",            \"stepUp\": {                \"type\": \"REQUIRE_PASSCODE\",                \"mandatory\": true,                \"url\": \"https://uat.woolworthspay.com.au/container-ws/tbd\"            },                      \"receiptData\": {                \"cardSuffix\": \"2517\"            },            \"externalServiceCode\": \"02\",            \"externalServiceMessage\": \"FAILURE\"        }    ],    \"payPal\": [        {            \"paymentInstrumentId\": \"90271\",            \"paymentToken\": \"15f774d0-e42e-11e9-a359-2a2ae2dbcce4\",            \"errorCode\": \"UN99\",            \"errorMessage\": \"UNEXPECTED SYSTEM FAILURE\",            \"errorDetail\": \"We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)\",            \"receiptData\": {                \"payPalId\": \"jane.doe@paypal.com\",                \"customerId\": \"690238314\"            },            \"externalServiceCode\": \"02\",            \"externalServiceMessage\": \"FAILURE\"        }    ],    \"androidPay\": [],    \"googlePay\": [        {            \"paymentInstrumentId\": \"90953\",            \"paymentToken\": \"76a4c2f1-7620-4bc4-8f4f-01c1467ea318\",            \"errorCode\": \"UN99\",            \"errorMessage\": \"UNEXPECTED SYSTEM FAILURE\",            \"errorDetail\": \"We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)\",            \"stepUp\": {                \"type\": \"REFRESH_TOKEN\",                \"mandatory\": true,                \"url\": \"https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/googlepay/tokenize/90953\"            },            \"extendedTransactionData\": [                {                    \"field\": \"bin\",                    \"value\": \"376445\"                }            ],            \"externalServiceCode\": \"02\",            \"externalServiceMessage\": \"FAILURE\"        }    ],    \"applePay\": [        {            \"paymentInstrumentId\": \"90375\",            \"paymentToken\": \"64dee650-e42e-11e9-81b4-2a2ae2dbcce4\",            \"errorCode\": \"UN99\",            \"errorMessage\": \"UNEXPECTED SYSTEM FAILURE\",            \"errorDetail\": \"We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)\",            \"stepUp\": {                \"type\": \"REFRESH_TOKEN\",                \"mandatory\": true,                \"url\": \"https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/applepay/tokenize/90375\"            },            \"externalServiceCode\": \"02\",            \"externalServiceMessage\": \"FAILURE\"        }    ],    \"unknown\": [        {            \"paymentInstrumentId\": \"90945\",            \"paymentToken\": null,            \"errorCode\": \"UN99\",            \"errorMessage\": \"UNEXPECTED SYSTEM FAILURE\",            \"errorDetail\": \"We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)\"        }    ]}"
      },
      "PaymentsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Oops! An unknown error has occurred"
          },
          "creditCards": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The credit card payment instrument id.",
                  "example": "90731"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The credit card payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "712029a1-c0aa-41bc-a810-3d42424c5834"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For credit cards this will be CAPTURE_CVV which identifies that the consumer must capture the CVV prior to payment.",
                      "example": "CAPTURE_CVV"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV or CVV only. The URL will automatically switch between expiry and CVV or CVV only endpoints based on the container requirement.",
                      "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
                    }
                  },
                  "description": "Only present if an error occurred during payment."
                },
                "receiptData": {
                  "required": [
                    "cardSuffix",
                    "expiryMonth",
                    "expiryYear",
                    "scheme"
                  ],
                  "type": "object",
                  "properties": {
                    "cardSuffix": {
                      "type": "string",
                      "description": "The suffix (last 4 digits) of the credit card number used in the WebPay transaction.",
                      "example": "6106"
                    },
                    "scheme": {
                      "type": "string",
                      "description": "The credit card scheme.",
                      "example": "MASTERCARD"
                    },
                    "expiryMonth": {
                      "type": "string",
                      "description": "The month of the expiry date of the credit card.",
                      "example": "05"
                    },
                    "expiryYear": {
                      "type": "string",
                      "description": "The year of the expiry date of the credit card.",
                      "example": "21"
                    }
                  },
                  "description": "This object is only included in the response if it is enabled in the consumers API configuration."
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field. The 'token' field is only included in the response if it is enabled in the consumers API configuration.",
                        "enum": [
                          "bin",
                          "stan",
                          "rrn",
                          "token",
                          "mid",
                          "terminalId"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "401200"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          },
          "giftCards": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The gift card payment instrument id.",
                  "example": "81054"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The gift card payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "ec9b062a-220a-43b3-8185-a8ca4fc4dc0c"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For gift cards this will be REQUIRE_PASSCODE which identifies that the consumer must capture the PIN prior to payment.",
                      "example": "REQUIRE_PASSCODE"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "TBD",
                      "example": "https://uat.woolworthspay.com.au/container-ws/tbd"
                    }
                  }
                },
                "receiptData": {
                  "required": [
                    "cardSuffix"
                  ],
                  "type": "object",
                  "properties": {
                    "cardSuffix": {
                      "type": "string",
                      "description": "The suffix (last 4 digits) of the gift card number used in the WEX transaction.",
                      "example": "2517"
                    }
                  },
                  "description": "This object is only included in the response if it is enabled in the consumers API configuration."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. WEX). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. WEX). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          },
          "payPal": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The paypal payment instrument id.",
                  "example": "90271"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The paypal payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "15f774d0-e42e-11e9-a359-2a2ae2dbcce4"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "receiptData": {
                  "required": [
                    "customerId",
                    "payPalId"
                  ],
                  "type": "object",
                  "properties": {
                    "payPalId": {
                      "type": "string",
                      "description": "The Paypal email id.",
                      "example": "jane.doe@paypal.com"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "The Paypal customer id.",
                      "example": "690238314"
                    }
                  },
                  "description": "This object is only included in the response if it is enabled in the consumers API configuration."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. PayPal). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. PayPal). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          },
          "androidPay": {
            "type": "array",
            "description": "Android Pay has been replaced by Google Pay. This property has been retained for backward compatibility and will always be an empty array.",
            "items": {
              "type": "object",
              "properties": {},
              "example": "[]"
            }
          },
          "googlePay": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The google pay payment instrument id.",
                  "example": "90953"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The google pay payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For google pay this will be REFRESH_TOKEN.",
                      "example": "REFRESH_TOKEN"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the endpoint to use to update the google pay token.",
                      "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/googlepay/tokenize/90953"
                    }
                  }
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field.",
                        "enum": [
                          "bin"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "376445"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Google Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Google Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          },
          "applePay": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The apple pay payment instrument id.",
                  "example": "90375"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The apple pay payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "64dee650-e42e-11e9-81b4-2a2ae2dbcce4"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "stepUp": {
                  "required": [
                    "mandatory",
                    "type",
                    "url"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the step up action. For apple pay this will be REFRESH_TOKEN.",
                      "example": "REFRESH_TOKEN"
                    },
                    "mandatory": {
                      "type": "boolean",
                      "description": "A flag to indicate if this step up (action) is mandatory.",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the endpoint to use to update the apple pay token.",
                      "example": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/applepay/tokenize/90375"
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Apple Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Apple Pay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          },
          "unknown": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "paymentInstrumentId",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentInstrumentId": {
                  "type": "string",
                  "description": "The unknown payment instrument id.",
                  "example": "90945"
                },
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token. The payment token is a unique identifier for the payment instrument. Will be null if the payment instrument is not valid.",
                  "example": null
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                }
              }
            }
          }
        },
        "description": "The JSON error response structure of the Payments endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "Oops! An unknown error has occurred",
          "creditCards": [
            {
              "paymentInstrumentId": "90731",
              "paymentToken": "712029a1-c0aa-41bc-a810-3d42424c5834",
              "errorCode": "BV57",
              "errorMessage": "ILLEGAL STEP UP TOKEN FOUND",
              "errorDetail": "Illegal stepUpToken found in the system for the payment instrument. Please provide a valid value or contact system support. (Looking up CVV token)",
              "stepUp": {
                "type": "CAPTURE_CVV",
                "mandatory": true,
                "url": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
              },
              "receiptData": {
                "cardSuffix": "6106",
                "scheme": "MASTERCARD",
                "expiryMonth": "05",
                "expiryYear": "21"
              },
              "extendedTransactionData": [
                {
                  "field": "bin",
                  "value": "401200"
                },
                {
                  "field": "stan",
                  "value": "001675"
                },
                {
                  "field": "rrn",
                  "value": "000000000076"
                },
                {
                  "field": "token",
                  "value": "40120080000200000928"
                },
                {
                  "field": "mid",
                  "value": "611000602006135"
                },
                {
                  "field": "terminalId",
                  "value": "W6135100"
                }
              ],
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ],
          "giftCards": [
            {
              "paymentInstrumentId": "81054",
              "paymentToken": "ec9b062a-220a-43b3-8185-a8ca4fc4dc0c",
              "errorCode": "UN99",
              "errorMessage": "UNEXPECTED SYSTEM FAILURE",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "stepUp": {
                "type": "REQUIRE_PASSCODE",
                "mandatory": true,
                "url": "https://uat.woolworthspay.com.au/container-ws/tbd"
              },
              "receiptData": {
                "cardSuffix": "2517"
              },
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ],
          "payPal": [
            {
              "paymentInstrumentId": "90271",
              "paymentToken": "15f774d0-e42e-11e9-a359-2a2ae2dbcce4",
              "errorCode": "UN99",
              "errorMessage": "UNEXPECTED SYSTEM FAILURE",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "receiptData": {
                "payPalId": "jane.doe@paypal.com",
                "customerId": "690238314"
              },
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ],
          "androidPay": [],
          "googlePay": [
            {
              "paymentInstrumentId": "90953",
              "paymentToken": "76a4c2f1-7620-4bc4-8f4f-01c1467ea318",
              "errorCode": "UN99",
              "errorMessage": "UNEXPECTED SYSTEM FAILURE",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "stepUp": {
                "type": "REFRESH_TOKEN",
                "mandatory": true,
                "url": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/googlepay/tokenize/90953"
              },
              "extendedTransactionData": [
                {
                  "field": "bin",
                  "value": "376445"
                }
              ],
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ],
          "applePay": [
            {
              "paymentInstrumentId": "90375",
              "paymentToken": "64dee650-e42e-11e9-81b4-2a2ae2dbcce4",
              "errorCode": "UN99",
              "errorMessage": "UNEXPECTED SYSTEM FAILURE",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "stepUp": {
                "type": "REFRESH_TOKEN",
                "mandatory": true,
                "url": "https://{environment}.mobile-api.woolworths.com.au/wow/v1/pay/applepay/tokenize/90375"
              },
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ],
          "unknown": [
            {
              "paymentInstrumentId": "90945",
              "errorCode": "UN99",
              "errorMessage": "UNEXPECTED SYSTEM FAILURE",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)"
            }
          ]
        }
      },
      "CompletionsRequest": {
        "required": [
          "clientReference",
          "completions",
          "orderNumber"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "Z3XFS8507RDC71T"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "completions": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount you want to process in the completion.",
                  "example": 20.5
                }
              }
            }
          }
        },
        "description": "The JSON request structure of the Completions endpoint.",
        "example": {
          "clientReference": "Z3XFS8507RDC71T",
          "orderNumber": "20170505090",
          "completions": [
            {
              "paymentTransactionRef": "1000000000670622",
              "amount": 20.5
            },
            {
              "paymentTransactionRef": "1000000000670623",
              "amount": 10
            }
          ]
        }
      },
      "CompletionsSuccessResponse": {
        "required": [
          "completionResponses",
          "partialSuccess",
          "transactionReceipt"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670875"
          },
          "partialSuccess": {
            "type": "boolean",
            "description": "A flag to indicate if a split completion was only partially successful, ie. at least 1 of the completions had a successful result.",
            "example": true
          },
          "completionResponses": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "completionTransactionRef",
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "completionTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the completion transaction in the container.",
                  "example": "1000000000670875"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount processed in the completion.",
                  "example": 20.5
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Completions endpoint.",
        "example": "Complete Success:{    \"transactionReceipt\": \"1000000000670875\",    \"partialSuccess\": false,    \"completionResponses\": [        {            \"paymentTransactionRef\": \"1000000000670622\",            \"completionTransactionRef\": \"1000000000670875\",            \"amount\": 20.5,            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        },        {            \"paymentTransactionRef\": \"1000000000670623\",            \"completionTransactionRef\": \"1000000000670876\",            \"amount\": 10,            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        }    ]}Partial Success:{    \"transactionReceipt\": \"1000000000670875\",    \"partialSuccess\": true,    \"completionResponses\": [        {            \"paymentTransactionRef\": \"1000000000670622\",            \"completionTransactionRef\": \"1000000000670875\",            \"amount\": 20.5,            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        },        {            \"paymentTransactionRef\": \"1000000000670623\",            \"errorCode\": \"BI55\",            \"errorMessage\": \"ORIGINAL PAYMENT TRANSACTION NOT FOUND\",            \"errorDetail\": \"Original payment transaction record cannot be found. Please provide a valid original transaction reference in the request. (processing payment)\",            \"externalServiceCode\": \"55\",            \"externalServiceMessage\": \"ORIGINAL PAYMENT TRANSACTION NOT FOUND\"        }    ]}"
      },
      "CompletionsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Oops! An unknown error has occurred"
          },
          "completionResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "0T"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "INVALID COMPLETION AUTH NOT FOUND"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Completions endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "Oops! An unknown error has occurred",
          "completionResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "errorCode": "ES52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "PAYMENT TRANSACTION FAILED Please try later or contact support for further investigation. (processing payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID COMPLETION AUTH NOT FOUND"
            },
            {
              "paymentTransactionRef": "1000000000670623",
              "errorCode": "ES52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "PAYMENT TRANSACTION FAILED Please try later or contact support for further investigation. (processing payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID COMPLETION AUTH NOT FOUND"
            }
          ]
        }
      },
      "VoidsRequest": {
        "required": [
          "clientReference",
          "orderNumber",
          "voids"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T8VZS5KQH0N278D"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "voids": {
            "type": "array",
            "items": {
              "required": [
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                }
              }
            }
          }
        },
        "description": "The JSON request structure of the Voids endpoint.",
        "example": {
          "clientReference": "T8VZS5KQH0N278D",
          "orderNumber": "20170505090",
          "voids": [
            {
              "paymentTransactionRef": "1000000000670622"
            },
            {
              "paymentTransactionRef": "1000000000670623"
            }
          ]
        }
      },
      "VoidsSuccessResponse": {
        "required": [
          "partialSuccess",
          "transactionReceipt",
          "voidResponses"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670875"
          },
          "partialSuccess": {
            "type": "boolean",
            "description": "A flag to indicate if a split void was only partially successful, ie. at least 1 of the voids had a successful result.",
            "example": true
          },
          "voidResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef",
                "voidTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "voidTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the void transaction in the container.",
                  "example": "1000000000670875"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Voids endpoint.",
        "example": "Complete Success:{    \"transactionReceipt\": \"1000000000670875\",    \"partialSuccess\": false,    \"voidResponses\": [        {            \"paymentTransactionRef\": \"1000000000670622\",            \"voidTransactionRef\": \"1000000000670875\",            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        },        {            \"paymentTransactionRef\": \"1000000000670623\",            \"voidTransactionRef\": \"1000000000670876\",            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        }    ]}Partial Success:{    \"transactionReceipt\": \"1000000000670875\",    \"partialSuccess\": true,    \"voidResponses\": [        {            \"paymentTransactionRef\": \"1000000000670622\",            \"voidTransactionRef\": \"1000000000670875\",            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        },        {            \"paymentTransactionRef\": \"1000000000670623\",            \"errorCode\": \"BI55\",            \"errorMessage\": \"ORIGINAL PAYMENT TRANSACTION NOT FOUND\",            \"errorDetail\": \"Original payment transaction record cannot be found. Please provide a valid original transaction reference in the request. (processing payment)\",            \"externalServiceCode\": \"55\",            \"externalServiceMessage\": \"ORIGINAL PAYMENT TRANSACTION NOT FOUND\"        }    ]}"
      },
      "VoidsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Oops! An unknown error has occurred"
          },
          "voidResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "0T"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "INVALID VOID AUTH NOT FOUND"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Voids endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "Oops! An unknown error has occurred",
          "voidResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "errorCode": "ES52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "PAYMENT TRANSACTION FAILED Please try later or contact support for further investigation. (processing payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID VOID AUTH NOT FOUND"
            },
            {
              "paymentTransactionRef": "1000000000670623",
              "errorCode": "ES52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "PAYMENT TRANSACTION FAILED Please try later or contact support for further investigation. (processing payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID VOID AUTH NOT FOUND"
            }
          ]
        }
      },
      "RefundsRequest": {
        "required": [
          "clientReference",
          "orderNumber",
          "refunds"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "V9FI6BV0BWGXO06"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "refunds": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the payment transaction in the container.",
                  "example": "1000000000670622"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount you want to refund.",
                  "example": 20.5
                }
              }
            }
          }
        },
        "description": "The JSON request structure of the Refunds endpoint.",
        "example": {
          "clientReference": "V9FI6BV0BWGXO06",
          "orderNumber": "20170505090",
          "refunds": [
            {
              "paymentTransactionRef": "1000000000670622",
              "amount": 20.5
            },
            {
              "paymentTransactionRef": "1000000000670623",
              "amount": 10
            }
          ]
        }
      },
      "RefundsSuccessResponse": {
        "required": [
          "partialSuccess",
          "refundResponses",
          "transactionReceipt"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670875"
          },
          "partialSuccess": {
            "type": "boolean",
            "description": "A flag to indicate if a split refund was only partially successful, ie. at least 1 of the refunds had a successful result.",
            "example": true
          },
          "refundResponses": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef",
                "refundTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "refundTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the refund transaction in the container.",
                  "example": "1000000000670875"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount processed in the refund.",
                  "example": 20.5
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Refunds endpoint.",
        "example": "Complete Success:{    \"transactionReceipt\": \"1000000000670875\",    \"partialSuccess\": false,    \"refundResponses\": [        {            \"paymentTransactionRef\": \"1000000000670622\",            \"refundTransactionRef\": \"1000000000670875\",            \"amount\": 20.5,            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        },        {            \"paymentTransactionRef\": \"1000000000670623\",            \"refundTransactionRef\": \"1000000000670876\",            \"amount\": 10,            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        }    ]}Partial Success:{    \"transactionReceipt\": \"1000000000670875\",    \"partialSuccess\": true,    \"refundResponses\": [        {            \"paymentTransactionRef\": \"1000000000670622\",            \"refundTransactionRef\": \"1000000000670875\",            \"amount\": 20.5,            \"externalServiceCode\": \"00\",            \"externalServiceMessage\": \"APPROVED\"        },        {            \"paymentTransactionRef\": \"1000000000670623\",            \"errorCode\": \"BI55\",            \"errorMessage\": \"ORIGINAL PAYMENT TRANSACTION NOT FOUND\",            \"errorDetail\": \"Original payment transaction record cannot be found. Please provide a valid original transaction reference in the request. (processing payment)\",            \"externalServiceCode\": \"55\",            \"externalServiceMessage\": \"ORIGINAL PAYMENT TRANSACTION NOT FOUND\"        }    ]}"
      },
      "RefundsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Oops! An unknown error has occurred"
          },
          "refundResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "UN99"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "UNEXPECTED SYSTEM FAILURE"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "0T"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "INVALID REFUND AUTH NOT FOUND"
                }
              }
            }
          }
        },
        "description": "The JSON response structure of the Refunds endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "Oops! An unknown error has occurred",
          "refundResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "errorCode": "ES52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "PAYMENT TRANSACTION FAILED Please try later or contact support for further investigation. (processing payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID REFUND AUTH NOT FOUND"
            },
            {
              "paymentTransactionRef": "1000000000670623",
              "errorCode": "ES52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "PAYMENT TRANSACTION FAILED Please try later or contact support for further investigation. (processing payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID REFUND AUTH NOT FOUND"
            }
          ]
        }
      },
      "CreatePaymentAgreementRequest": {
        "required": [
          "billingAddress",
          "clientReference",
          "paymentAgreement"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T5ESYRPWJKPHF54"
          },
          "customerRef": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the customer in the merchant’s system.",
            "example": "654321"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction. This property is only required if the 'immediateCharge' property is true.",
            "example": "201905070001"
          },
          "billingAddress": {
            "required": [
              "countryCode",
              "firstName",
              "lastName",
              "postalCode",
              "stateOrTerritory",
              "streetAddress",
              "suburb"
            ],
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "The customer's first name.",
                "example": "Francois"
              },
              "lastName": {
                "type": "string",
                "description": "The customer's last name.",
                "example": "van der Merwe"
              },
              "email": {
                "type": "string",
                "description": "The customer’s email address.",
                "example": "fvandermerwe@woolworths.com.au"
              },
              "company": {
                "type": "string",
                "description": "The customer's company name.",
                "example": "Woolworths Limited"
              },
              "extendedAddress": {
                "type": "string",
                "description": "The customer's extended address line.",
                "example": "Level 1"
              },
              "streetAddress": {
                "type": "string",
                "description": "The customer's street address line.",
                "example": "22 River Oak Circuit"
              },
              "suburb": {
                "type": "string",
                "description": "The customer's suburb.",
                "example": "Kellyville"
              },
              "stateOrTerritory": {
                "type": "string",
                "description": "The customer's abbreviated state or territory.",
                "example": "NSW"
              },
              "postalCode": {
                "type": "string",
                "description": "The customer's postal code.",
                "example": "2155"
              },
              "countryCode": {
                "type": "string",
                "description": "The customer's Alpha-2 (2-character) ISO-3166-1 country code.",
                "example": "AU"
              }
            },
            "description": "The customer's billing address."
          },
          "paymentAgreement": {
            "required": [
              "chargeAmount",
              "chargeFrequency",
              "paymentInstrumentId",
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The payment agreement type.",
                "enum": [
                  "RECURRING",
                  "ADHOC",
                  "INSTALLMENT"
                ]
              },
              "paymentInstrumentId": {
                "type": "string",
                "description": "The payment agreement payment instrument id that will be used for the charges.",
                "example": "90731"
              },
              "startDate": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The payment agreement start date and time. The timestamp format is ISO8601.",
                "example": "2018-09-01T00:00:00.000+1100"
              },
              "endDate": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The payment agreement end date and time. The timestamp format is ISO8601.",
                "example": "2018-12-31T23:59:59.999+1100"
              },
              "chargeFrequency": {
                "type": "string",
                "description": "The payment agreement charge frequency.",
                "enum": [
                  "WEEKLY",
                  "FORTNIGHTLY",
                  "MONTHLY"
                ]
              },
              "chargeAmount": {
                "type": "number",
                "description": "The amount that will be charged at the frequency specified in the payment agreement.",
                "example": 25.99
              },
              "immediateCharge": {
                "type": "boolean",
                "description": "A flag to indicate if a charge transaction must be performed at the time of payment agreement creation. This in convenient in the cases where a customer wants to process a first charge transaction immediately at payment agreement creation.",
                "example": true,
                "default": false
              },
              "stepUpToken": {
                "type": "string",
                "description": "The step-up token is used to track additional credit card information (eg. CVV and expiry) attached to the payment instrument. It's only valid for a predefined time and if an expired step-up token is used during validation, the validation of that instrument will fail and the user will have to get a new step-up token before retrying the API call. A step-up token is returned in the response of a credit card iframe. This property is only required for credit card instruments and only if specific credit card information (eg. CVV and expiry) is required during the API call.",
                "example": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
              }
            }
          },
          "fraudPayload": {
            "required": [
              "format",
              "message",
              "provider",
              "responseFormat",
              "version"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "The fraud check provider.",
                "example": "cybersource"
              },
              "version": {
                "type": "string",
                "description": "The fraud check version.",
                "example": "CyberSourceTransaction_1.101"
              },
              "format": {
                "type": "string",
                "description": "The fraud check message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "responseFormat": {
                "type": "string",
                "description": "The fraud check response message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "message": {
                "type": "string",
                "description": "The fraud check message.",
                "example": "GzbOxpLagX6iFEb7td61cZyA="
              }
            },
            "description": "Set to null to skip the fraud check."
          }
        },
        "description": "The JSON request structure of the Create Payment Agreement endpoint.",
        "example": {
          "clientReference": "T5ESYRPWJKPHF54",
          "customerRef": "654321",
          "orderNumber": "201905070001",
          "billingAddress": {
            "firstName": "Francois",
            "lastName": "van der Merwe",
            "email": "fvandermerwe@woolworths.com.au",
            "company": "Woolworths Limited",
            "extendedAddress": "Level 1",
            "streetAddress": "22 River Oak Circuit",
            "suburb": "Kellyville",
            "stateOrTerritory": "NSW",
            "postalCode": "2155",
            "countryCode": "AU"
          },
          "paymentAgreement": {
            "type": "RECURRING",
            "paymentInstrumentId": "90731",
            "startDate": "2018-09-01T00:00:00.000+1100",
            "endDate": "2018-12-31T23:59:59.999+1100",
            "chargeFrequency": "WEEKLY",
            "chargeAmount": 25.99,
            "immediateCharge": true,
            "stepUpToken": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
          },
          "fraudPayload": {
            "provider": "cybersource",
            "version": "CyberSourceTransaction_1.101",
            "format": "ZIP_BASE_64_ENCODED",
            "responseFormat": "ZIP_BASE_64_ENCODED",
            "message": "GzbOxpLagX6iFEb7td61cZyA="
          }
        }
      },
      "UpdatePaymentAgreementRequest": {
        "required": [
          "clientReference"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T5ESYRPWJKPHF54"
          },
          "customerRef": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the customer in the merchant’s system.",
            "example": "654321"
          },
          "billingAddress": {
            "required": [
              "countryCode",
              "firstName",
              "lastName",
              "postalCode",
              "stateOrTerritory",
              "streetAddress",
              "suburb"
            ],
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "The customer's first name.",
                "example": "Francois"
              },
              "lastName": {
                "type": "string",
                "description": "The customer's last name.",
                "example": "van der Merwe"
              },
              "email": {
                "type": "string",
                "description": "The customer’s email address.",
                "example": "fvandermerwe@woolworths.com.au"
              },
              "company": {
                "type": "string",
                "description": "The customer's company name.",
                "example": "Woolworths Limited"
              },
              "extendedAddress": {
                "type": "string",
                "description": "The customer's extended address line.",
                "example": "Level 1"
              },
              "streetAddress": {
                "type": "string",
                "description": "The customer's street address line.",
                "example": "22 River Oak Circuit"
              },
              "suburb": {
                "type": "string",
                "description": "The customer's suburb.",
                "example": "Kellyville"
              },
              "stateOrTerritory": {
                "type": "string",
                "description": "The customer's abbreviated state or territory.",
                "example": "NSW"
              },
              "postalCode": {
                "type": "string",
                "description": "The customer's postal code.",
                "example": "2155"
              },
              "countryCode": {
                "type": "string",
                "description": "The customer's Alpha-2 (2-character) ISO-3166-1 country code.",
                "example": "AU"
              }
            },
            "description": "The customer's billing address."
          },
          "paymentAgreement": {
            "type": "object",
            "properties": {
              "paymentInstrumentId": {
                "type": "string",
                "description": "The payment agreement payment instrument id that will be used for the charges.",
                "example": "90731"
              },
              "startDate": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The payment agreement start date and time. The timestamp format is ISO8601.",
                "example": "2018-09-01T00:00:00.000+1100"
              },
              "endDate": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The payment agreement end date and time. The timestamp format is ISO8601.",
                "example": "2018-12-31T23:59:59.999+1100"
              },
              "chargeFrequency": {
                "type": "string",
                "description": "The payment agreement charge frequency.",
                "enum": [
                  "WEEKLY",
                  "FORTNIGHTLY",
                  "MONTHLY"
                ]
              },
              "chargeAmount": {
                "type": "number",
                "description": "The amount that will be charged at the frequency specified in the payment agreement.",
                "example": 25.99
              },
              "stepUpToken": {
                "type": "string",
                "description": "The step-up token is used to track additional credit card information (eg. CVV and expiry) attached to the payment instrument. It's only valid for a predefined time and if an expired step-up token is used during validation, the validation of that instrument will fail and the user will have to get a new step-up token before retrying the API call. A step-up token is returned in the response of a credit card iframe. This property is only required for credit card instruments and only if specific credit card information (eg. CVV and expiry) is required during the API call. Only required if the payment agreement payment instrument id is being changed to a different payment instrument.",
                "example": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
              }
            }
          },
          "fraudPayload": {
            "required": [
              "format",
              "message",
              "provider",
              "responseFormat",
              "version"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "The fraud check provider.",
                "example": "cybersource"
              },
              "version": {
                "type": "string",
                "description": "The fraud check version.",
                "example": "CyberSourceTransaction_1.101"
              },
              "format": {
                "type": "string",
                "description": "The fraud check message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "responseFormat": {
                "type": "string",
                "description": "The fraud check response message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "message": {
                "type": "string",
                "description": "The fraud check message.",
                "example": "GzbOxpLagX6iFEb7td61cZyA="
              }
            },
            "description": "Set to null to skip the fraud check. Only required if the payment agreement payment instrument id is being changed to a different payment instrument."
          }
        },
        "description": "The JSON request structure of the Update Payment Agreement endpoint.",
        "example": {
          "clientReference": "T5ESYRPWJKPHF54",
          "customerRef": "654321",
          "billingAddress": {
            "firstName": "Francois",
            "lastName": "van der Merwe",
            "email": "fvandermerwe@woolworths.com.au",
            "company": "Woolworths Limited",
            "extendedAddress": "Level 1",
            "streetAddress": "22 River Oak Circuit",
            "suburb": "Kellyville",
            "stateOrTerritory": "NSW",
            "postalCode": "2155",
            "countryCode": "AU"
          },
          "paymentAgreement": {
            "paymentInstrumentId": "90731",
            "startDate": "2018-09-01T00:00:00.000+1100",
            "endDate": "2018-12-31T23:59:59.999+1100",
            "chargeFrequency": "WEEKLY",
            "chargeAmount": 25.99,
            "stepUpToken": "e86b3a32-96a5-4659-b6d8-5d685bfa78e8"
          },
          "fraudPayload": {
            "provider": "cybersource",
            "version": "CyberSourceTransaction_1.101",
            "format": "ZIP_BASE_64_ENCODED",
            "responseFormat": "ZIP_BASE_64_ENCODED",
            "message": "GzbOxpLagX6iFEb7td61cZyA="
          }
        }
      },
      "DeletePaymentAgreementResponse": {
        "type": "object",
        "description": "The JSON response structure of the Delete Payment Agreement endpoint.",
        "example": {}
      },
      "ChargePaymentAgreementRequest": {
        "required": [
          "amount",
          "clientReference",
          "orderNumber",
          "paymentToken",
          "transactionType"
        ],
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "object",
            "properties": {
              "creditCard": {
                "type": "string",
                "description": "The container transaction type to use for credit card instruments. This property is only required if the charge request is using a credit card instrument.",
                "enum": [
                  "PREAUTH",
                  "PURCHASE"
                ]
              },
              "giftCard": {
                "type": "string",
                "description": "The container transaction type to use for gift card instruments. This property is only required if the charge request is using a gift card instrument. Only PURCHASE is currently supported for gift card instruments.",
                "enum": [
                  "PURCHASE"
                ]
              },
              "payPal": {
                "type": "string",
                "description": "The container transaction type to use for paypal instruments. This property is only required if the charge request is using a paypal instrument. Only PURCHASE is currently supported for paypal instruments.",
                "enum": [
                  "PURCHASE"
                ]
              },
              "googlePay": {
                "required": [
                  "creditCard",
                  "debitCard"
                ],
                "type": "object",
                "properties": {
                  "creditCard": {
                    "type": "string",
                    "description": "The container transaction type to use for google pay credit card instruments.",
                    "enum": [
                      "PREAUTH",
                      "PURCHASE"
                    ]
                  },
                  "debitCard": {
                    "type": "string",
                    "description": "The container transaction type to use for google pay debit card instruments. Only PURCHASE is currently supported for google pay debit card instruments.",
                    "enum": [
                      "PURCHASE"
                    ]
                  }
                },
                "description": "This object is only required if the charge request is using an google pay instrument."
              },
              "applePay": {
                "required": [
                  "creditCard",
                  "debitCard"
                ],
                "type": "object",
                "properties": {
                  "creditCard": {
                    "type": "string",
                    "description": "The container transaction type to use for apple pay credit card instruments.",
                    "enum": [
                      "PREAUTH",
                      "PURCHASE"
                    ]
                  },
                  "debitCard": {
                    "type": "string",
                    "description": "The container transaction type to use for apple pay debit card instruments. Only PURCHASE is currently supported for apple pay debit card instruments.",
                    "enum": [
                      "PURCHASE"
                    ]
                  }
                },
                "description": "This object is only required if the charge request is using an apple pay instrument."
              }
            }
          },
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T5ESYRPWJKPHF54"
          },
          "customerRef": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the customer in the merchant’s system.",
            "example": "654321"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "201808312007"
          },
          "paymentToken": {
            "type": "string",
            "description": "The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement.",
            "example": "8f65ca0a-7873-4d1f-ab8d-6815adae5300"
          },
          "amount": {
            "type": "number",
            "description": "The amount that will be charged against the payment instrument linked to the payment agreement.",
            "example": 25.99
          },
          "fraudPayload": {
            "required": [
              "format",
              "message",
              "provider",
              "responseFormat",
              "version"
            ],
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "The fraud check provider.",
                "example": "cybersource"
              },
              "version": {
                "type": "string",
                "description": "The fraud check version.",
                "example": "CyberSourceTransaction_1.101"
              },
              "format": {
                "type": "string",
                "description": "The fraud check message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "responseFormat": {
                "type": "string",
                "description": "The fraud check response message format.",
                "enum": [
                  "ZIP_BASE_64_ENCODED",
                  "XML"
                ]
              },
              "message": {
                "type": "string",
                "description": "The fraud check message.",
                "example": "GzbOxpLagX6iFEb7td61cZyA="
              }
            },
            "description": "Set to null to skip the fraud check."
          }
        },
        "description": "The JSON request structure of the Charge Payment Agreement endpoint.",
        "example": {
          "transactionType": {
            "creditCard": "PREAUTH",
            "giftCard": "PURCHASE",
            "payPal": "PURCHASE",
            "googlePay": {
              "creditCard": "PREAUTH",
              "debitCard": "PURCHASE"
            },
            "applePay": {
              "creditCard": "PREAUTH",
              "debitCard": "PURCHASE"
            }
          },
          "clientReference": "T5ESYRPWJKPHF54",
          "customerRef": "654321",
          "orderNumber": "201808312007",
          "paymentToken": "8f65ca0a-7873-4d1f-ab8d-6815adae5300",
          "amount": 25.99,
          "fraudPayload": {
            "provider": "cybersource",
            "version": "CyberSourceTransaction_1.101",
            "format": "ZIP_BASE_64_ENCODED",
            "responseFormat": "ZIP_BASE_64_ENCODED",
            "message": "GzbOxpLagX6iFEb7td61cZyA="
          }
        }
      },
      "PaymentAgreementResponse": {
        "required": [
          "paymentAgreement",
          "transactionReceipt"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the transaction in the container.",
            "example": "1000000000670621"
          },
          "paymentToken": {
            "type": "string",
            "description": "The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement.",
            "example": "27e07e4e-58df-4072-8e75-33dd464af667"
          },
          "paymentAgreement": {
            "required": [
              "cardSuffix",
              "chargeAmount",
              "chargeFrequency",
              "endDate",
              "expiryMonth",
              "expiryYear",
              "paymentInstrumentId",
              "paymentInstrumentType",
              "scheme",
              "startDate",
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The payment agreement type.",
                "enum": [
                  "RECURRING",
                  "ADHOC",
                  "INSTALLMENT"
                ]
              },
              "paymentInstrumentId": {
                "type": "string",
                "description": "The payment agreement payment instrument id that will be used for the charges.",
                "example": "90731"
              },
              "paymentInstrumentType": {
                "type": "string",
                "description": "The type of the payment instrument used in the payment agreement.",
                "example": "CREDIT_CARD"
              },
              "scheme": {
                "type": "string",
                "description": "The credit card scheme.",
                "example": "VISA"
              },
              "cardSuffix": {
                "type": "string",
                "description": "The suffix (last 4 digits) of the credit card number.",
                "example": "4405"
              },
              "expiryMonth": {
                "type": "string",
                "description": "The month of the expiry date of the credit card.",
                "example": "11"
              },
              "expiryYear": {
                "type": "string",
                "description": "The year of the expiry date of the credit card.",
                "example": "22"
              },
              "startDate": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The payment agreement start date and time. The timestamp format is ISO8601.",
                "example": "2018-09-01T00:00:00.000+1100"
              },
              "endDate": {
                "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
                "type": "string",
                "description": "The payment agreement end date and time. The timestamp format is ISO8601.",
                "example": "2018-12-31T23:59:59.999+1100"
              },
              "chargeFrequency": {
                "type": "string",
                "description": "The payment agreement charge frequency.",
                "enum": [
                  "WEEKLY",
                  "FORTNIGHTLY",
                  "MONTHLY"
                ]
              },
              "chargeAmount": {
                "type": "number",
                "description": "The amount that will be charged at the frequency specified in the payment agreement.",
                "example": 25.99
              }
            }
          },
          "fraudResponse": {
            "required": [
              "clientId",
              "decision",
              "reasonCode"
            ],
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "The fraud check client id. Will be null if the fraud check was skipped.",
                "example": "5017321752216948403009"
              },
              "reasonCode": {
                "type": "string",
                "description": "The fraud check reason code. Will be null if the fraud check was skipped.",
                "example": "480"
              },
              "decision": {
                "type": "string",
                "description": "The fraud check decision. Will be null if the fraud check was skipped.",
                "example": "REVIEW"
              }
            }
          },
          "extendedTransactionData": {
            "type": "array",
            "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
            "items": {
              "required": [
                "field",
                "value"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The name of the extended transaction data field. The 'token' field is only included in the response if it is enabled in the consumers API configuration.",
                  "enum": [
                    "bin",
                    "stan",
                    "rrn",
                    "token",
                    "mid",
                    "terminalId"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "The value of the extended transaction data field.",
                  "example": "401200"
                }
              }
            }
          },
          "externalServiceCode": {
            "type": "string",
            "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
            "example": "00"
          },
          "externalServiceMessage": {
            "type": "string",
            "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
            "example": "APPROVED"
          }
        },
        "description": "The JSON response structure of the Create and Update Payment Agreement endpoints.",
        "example": {
          "transactionReceipt": "1000000000670621",
          "paymentToken": "27e07e4e-58df-4072-8e75-33dd464af667",
          "paymentAgreement": {
            "type": "RECURRING",
            "paymentInstrumentId": "90731",
            "paymentInstrumentType": "CREDIT_CARD",
            "scheme": "VISA",
            "cardSuffix": "4405",
            "expiryMonth": "11",
            "expiryYear": "22",
            "startDate": "2018-09-01T00:00:00.000+1100",
            "endDate": "2018-12-31T23:59:59.999+1100",
            "chargeFrequency": "WEEKLY",
            "chargeAmount": 25.99
          },
          "fraudResponse": {
            "clientId": "5017321752216948403009",
            "reasonCode": "480",
            "decision": "REVIEW"
          },
          "extendedTransactionData": [
            {
              "field": "bin",
              "value": "401200"
            },
            {
              "field": "stan",
              "value": "001675"
            },
            {
              "field": "rrn",
              "value": "000000000076"
            },
            {
              "field": "token",
              "value": "40120080000200000928"
            },
            {
              "field": "mid",
              "value": "611000602006135"
            },
            {
              "field": "terminalId",
              "value": "W6135100"
            }
          ],
          "externalServiceCode": "00",
          "externalServiceMessage": "APPROVED"
        }
      },
      "PaymentAgreementErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode",
          "paymentToken"
        ],
        "type": "object",
        "properties": {
          "paymentToken": {
            "type": "string",
            "description": "The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement.",
            "example": "27e07e4e-58df-4072-8e75-33dd464af667"
          },
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BV57"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "ILLEGAL STEP UP TOKEN FOUND"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Illegal stepUpToken found in the system for the payment instrument. Please provide a valid value or contact system support. (Looking up CVV token)"
          },
          "stepUp": {
            "required": [
              "mandatory",
              "type",
              "url"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the step up action. For payment agreements this will be CAPTURE_CVV which identifies that the consumer must capture the CVV prior to payment.",
                "example": "CAPTURE_CVV"
              },
              "mandatory": {
                "type": "boolean",
                "description": "A flag to indicate if this step up (action) is mandatory.",
                "example": true
              },
              "url": {
                "type": "string",
                "description": "The URL of an iframe. This iframe is used to capture a credit card expiry and CVV or CVV only. The URL will automatically switch between expiry and CVV or CVV only endpoints based on the container requirement.",
                "example": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
              }
            },
            "description": "Only present if an error occurred during instrument verification."
          },
          "extendedTransactionData": {
            "type": "array",
            "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
            "items": {
              "required": [
                "field",
                "value"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The name of the extended transaction data field. The 'token' field is only included in the response if it is enabled in the consumers API configuration.",
                  "enum": [
                    "bin",
                    "stan",
                    "rrn",
                    "token",
                    "mid",
                    "terminalId"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "The value of the extended transaction data field.",
                  "example": "401200"
                }
              }
            }
          },
          "externalServiceCode": {
            "type": "string",
            "description": "The external service code (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
            "example": "99"
          },
          "externalServiceMessage": {
            "type": "string",
            "description": "The external service message (from eg. Webpay). This property is only included in the response if it is enabled in the consumers API configuration.",
            "example": "PAN OR TOKEN LOOKUP ERROR"
          }
        },
        "description": "The JSON error response structure of the Payment Agreement endpoints.",
        "example": {
          "paymentToken": "27e07e4e-58df-4072-8e75-33dd464af667",
          "httpStatusCode": 400,
          "errorCode": "BV57",
          "errorMessage": "ILLEGAL STEP UP TOKEN FOUND",
          "errorDetail": "Illegal stepUpToken found in the system for the payment instrument. Please provide a valid value or contact system support. (Looking up CVV token)",
          "stepUp": {
            "type": "CAPTURE_CVV",
            "mandatory": true,
            "url": "https://uat.woolworthspay.com.au/container-ws/getCaptureFrame/cvv/2f890821-e2c1-4dbb-aabf-dcaed3885923/90731"
          },
          "extendedTransactionData": [
            {
              "field": "bin",
              "value": "401200"
            },
            {
              "field": "stan",
              "value": "001675"
            },
            {
              "field": "rrn",
              "value": "000000000076"
            },
            {
              "field": "token",
              "value": "40120080000200000928"
            },
            {
              "field": "mid",
              "value": "611000602006135"
            },
            {
              "field": "terminalId",
              "value": "W6135100"
            }
          ],
          "externalServiceCode": "99",
          "externalServiceMessage": "PAN OR TOKEN LOOKUP ERROR"
        }
      },
      "OpenpayPaymentsRequest": {
        "required": [
          "channel",
          "clientReference",
          "orderNumber",
          "payments",
          "storeData",
          "transactionType"
        ],
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "object",
            "properties": {
              "openPay": {
                "type": "string",
                "description": "The container transaction type to use for openpay instruments.",
                "enum": [
                  "PREAUTH",
                  "PURCHASE"
                ]
              }
            }
          },
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "T5ESYRPWJKPHF54"
          },
          "customerRef": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the customer in the merchant’s system.",
            "example": "654321"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "channel": {
            "type": "string",
            "description": "The channel from which this charge is originating, eg. Online, In-Store.",
            "example": "Online"
          },
          "tradingAccountId": {
            "type": "string",
            "description": "The unique identifier for the merchants trading account.",
            "example": "Jt4jeXZ1CcmZCTKkHAuN"
          },
          "merchantTransactedAt": {
            "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "description": "The merchants transaction date and time. The timestamp format is ISO8601.",
            "example": "2020-06-19T14:30:00.000+1100"
          },
          "payments": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token.",
                  "example": "46ee5998-10cd-11ea-8d71-362b9e155667"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount you want to pay with the payment instrument.",
                  "example": 20.5
                },
                "gstAmount": {
                  "type": "number",
                  "description": "The GST amount of the full amount you want to pay with the payment instrument.",
                  "example": 1.86
                }
              }
            }
          },
          "storeData": {
            "required": [
              "storeId"
            ],
            "type": "object",
            "properties": {
              "storeId": {
                "type": "string",
                "description": "The payment transaction store id.",
                "example": "4952110"
              },
              "pin": {
                "type": "string",
                "description": "A pin for the payment method id.",
                "example": "12345"
              }
            }
          }
        },
        "description": "The JSON request structure of the Openpay Payments endpoint.",
        "example": {
          "transactionType": {
            "openPay": "PURCHASE"
          },
          "clientReference": "T5ESYRPWJKPHF54",
          "customerRef": "654321",
          "orderNumber": "20170505090",
          "channel": "Online",
          "tradingAccountId": "Jt4jeXZ1CcmZCTKkHAuN",
          "merchantTransactedAt": "2020-06-19T14:30:00.000+1100",
          "payments": [
            {
              "paymentToken": "46ee5998-10cd-11ea-8d71-362b9e155667",
              "amount": 20.5,
              "gstAmount": 1.86
            }
          ],
          "storeData": {
            "storeId": "4952110",
            "pin": "12345"
          }
        }
      },
      "OpenpayRefundsRequest": {
        "required": [
          "clientReference",
          "refunds"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "V9FI6BV0BWGXO06"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "merchantTransactedAt": {
            "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "description": "The merchants transaction date and time. The timestamp format is ISO8601.",
            "example": "2020-06-19T18:00:00.000+1100"
          },
          "refunds": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the payment transaction in the container.",
                  "example": "1000000000670622"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount you want to refund.",
                  "example": 20.5
                },
                "gstAmount": {
                  "type": "number",
                  "description": "The GST amount of the amount you want to refund.",
                  "example": 1.86
                },
                "reason": {
                  "type": "string",
                  "description": "The reason or justification for the refund.",
                  "example": "Item broken on delivery"
                }
              }
            }
          },
          "storeData": {
            "required": [
              "storeId"
            ],
            "type": "object",
            "properties": {
              "storeId": {
                "type": "string",
                "description": "The refund transaction store id.",
                "example": "4952110"
              }
            }
          }
        },
        "description": "The JSON request structure of the Openpay Refunds endpoint.",
        "example": {
          "clientReference": "V9FI6BV0BWGXO06",
          "orderNumber": "20170505090",
          "merchantTransactedAt": "2020-06-19T18:00:00.000+1100",
          "refunds": [
            {
              "paymentTransactionRef": "1000000000670622",
              "amount": 20.5,
              "gstAmount": 1.86,
              "reason": "Item broken on delivery"
            }
          ],
          "storeData": {
            "storeId": "4952110"
          }
        }
      },
      "OpenpayCompletionsRequest": {
        "required": [
          "clientReference",
          "completions"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "4VWPZ8676N7MUAO"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "merchantTransactedAt": {
            "pattern": "YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "description": "The merchants transaction date and time. The timestamp format is ISO8601.",
            "example": "2020-06-19T18:00:00.000+1100"
          },
          "completions": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the payment transaction in the container.",
                  "example": "1000000000670622"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount you want to process in the completion.",
                  "example": 20.5
                },
                "gstAmount": {
                  "type": "number",
                  "description": "The GST amount of the amount you want to process in the completion.",
                  "example": 1.86
                }
              }
            }
          }
        },
        "description": "The JSON request structure of the Openpay Completions endpoint.",
        "example": {
          "clientReference": "4VWPZ8676N7MUAO",
          "orderNumber": "20170505090",
          "merchantTransactedAt": "2020-06-19T18:00:00.000+1100",
          "completions": [
            {
              "paymentTransactionRef": "1000000000670622",
              "amount": 20.5,
              "gstAmount": 1.86
            }
          ]
        }
      },
      "OpenpayVoidsRequest": {
        "required": [
          "clientReference",
          "voids"
        ],
        "type": "object",
        "properties": {
          "clientReference": {
            "type": "string",
            "description": "A merchant application specific reference number. This number should uniquely identify the transaction in the merchant’s system.",
            "example": "H72YZE8JS9J7BYS"
          },
          "orderNumber": {
            "type": "string",
            "description": "The merchant order number of the transaction.",
            "example": "20170505090"
          },
          "voids": {
            "type": "array",
            "items": {
              "required": [
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the payment transaction in the container.",
                  "example": "1000000000670622"
                }
              }
            }
          }
        },
        "description": "The JSON request structure of the Openpay Voids endpoint.",
        "example": {
          "clientReference": "H72YZE8JS9J7BYS",
          "orderNumber": "20170505090",
          "voids": [
            {
              "paymentTransactionRef": "1000000000670622"
            }
          ]
        }
      },
      "OpenpayPaymentsSuccessResponse": {
        "required": [
          "paymentResponses",
          "transactionReceipt"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670622"
          },
          "paymentResponses": {
            "type": "array",
            "items": {
              "required": [
                "extendedTransactionData",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentToken",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "46ee5998-10cd-11ea-8d71-362b9e155667"
                },
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the openpay transaction in the container.",
                  "example": "1000000000670622"
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field.",
                        "enum": [
                          "openPayTransactionId",
                          "openPayOrderId",
                          "openPayPaymentMethod",
                          "openPayCreatedAt",
                          "openPayBillingAccountId",
                          "openPayBillingAccountName",
                          "openPayBillingAccountABN"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "3049562340, 100015, openPayPaymentMethod, 1592494136891, 24354657685656, Some Business Account, 88 000 014 675"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON success response structure of the Payments endpoint.",
        "example": {
          "transactionReceipt": "1000000000670622",
          "paymentResponses": [
            {
              "paymentToken": "46ee5998-10cd-11ea-8d71-362b9e155667",
              "paymentTransactionRef": "1000000000670622",
              "extendedTransactionData": [
                {
                  "field": "openPayTransactionId",
                  "value": "3049562340"
                },
                {
                  "field": "openPayOrderId",
                  "value": "100015"
                },
                {
                  "field": "openPayPaymentMethod",
                  "value": "openPayPaymentMethod"
                },
                {
                  "field": "openPayCreatedAt",
                  "value": "1592494136891"
                },
                {
                  "field": "openPayBillingAccountId",
                  "value": "24354657685656"
                },
                {
                  "field": "openPayBillingAccountName",
                  "value": "Some Business Account"
                },
                {
                  "field": "openPayBillingAccountABN",
                  "value": "88 000 014 675"
                }
              ],
              "externalServiceCode": "00",
              "externalServiceMessage": "APPROVED"
            }
          ]
        }
      },
      "OpenpayRefundsSuccessResponse": {
        "required": [
          "refundResponses",
          "transactionReceipt"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670875"
          },
          "refundResponses": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "extendedTransactionData",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef",
                "refundTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the openpay transaction in the container.",
                  "example": "1000000000670622"
                },
                "refundTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the refund transaction in the container.",
                  "example": "1000000000670875"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount processed in the refund.",
                  "example": 20.5
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field.",
                        "enum": [
                          "openPayTransactionId",
                          "openPayOrderId",
                          "openPayPaymentMethod",
                          "openPayCreatedAt",
                          "openPayBillingAccountId",
                          "openPayBillingAccountName",
                          "openPayBillingAccountABN"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "3049562340, 100015, openPayPaymentMethod, 1592494136891, 24354657685656, Some Business Account, 88 000 014 675"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON success response structure of the Refunds endpoint.",
        "example": {
          "transactionReceipt": "1000000000670875",
          "refundResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "refundTransactionRef": "1000000000670875",
              "amount": 20.5,
              "extendedTransactionData": [
                {
                  "field": "openPayTransactionId",
                  "value": "3049562340"
                },
                {
                  "field": "openPayOrderId",
                  "value": "100015"
                },
                {
                  "field": "openPayPaymentMethod",
                  "value": "openPayPaymentMethod"
                },
                {
                  "field": "openPayCreatedAt",
                  "value": "1592494136891"
                },
                {
                  "field": "openPayBillingAccountId",
                  "value": "24354657685656"
                },
                {
                  "field": "openPayBillingAccountName",
                  "value": "Some Business Account"
                },
                {
                  "field": "openPayBillingAccountABN",
                  "value": "88 000 014 675"
                }
              ],
              "externalServiceCode": "00",
              "externalServiceMessage": "APPROVED"
            }
          ]
        }
      },
      "OpenpayCompletionsSuccessResponse": {
        "required": [
          "completionResponses",
          "transactionReceipt"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670747"
          },
          "completionResponses": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "completionTransactionRef",
                "extendedTransactionData",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the openpay transaction in the container.",
                  "example": "1000000000670622"
                },
                "completionTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the completion transaction in the container.",
                  "example": "1000000000670747"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount processed in the completion.",
                  "example": 20.5
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field.",
                        "enum": [
                          "openPayTransactionId",
                          "openPayOrderId",
                          "openPayPaymentMethod",
                          "openPayCreatedAt",
                          "openPayBillingAccountId",
                          "openPayBillingAccountName",
                          "openPayBillingAccountABN"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "3049562340, 100015, openPayPaymentMethod, 1592494136891, 24354657685656, Some Business Account, 88 000 014 675"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON success response structure of the Completions endpoint.",
        "example": {
          "transactionReceipt": "1000000000670747",
          "completionResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "completionTransactionRef": "1000000000670747",
              "amount": 20.5,
              "extendedTransactionData": [
                {
                  "field": "openPayTransactionId",
                  "value": "3049562340"
                },
                {
                  "field": "openPayOrderId",
                  "value": "100015"
                },
                {
                  "field": "openPayPaymentMethod",
                  "value": "openPayPaymentMethod"
                },
                {
                  "field": "openPayCreatedAt",
                  "value": "1592494136891"
                },
                {
                  "field": "openPayBillingAccountId",
                  "value": "24354657685656"
                },
                {
                  "field": "openPayBillingAccountName",
                  "value": "Some Business Account"
                },
                {
                  "field": "openPayBillingAccountABN",
                  "value": "88 000 014 675"
                }
              ],
              "externalServiceCode": "00",
              "externalServiceMessage": "APPROVED"
            }
          ]
        }
      },
      "OpenpayVoidsSuccessResponse": {
        "required": [
          "transactionReceipt",
          "voidResponses"
        ],
        "type": "object",
        "properties": {
          "transactionReceipt": {
            "type": "string",
            "description": "Container reference in the transaction logs. This number uniquely identifies the whole/grouped transaction in the container.",
            "example": "1000000000670747"
          },
          "voidResponses": {
            "type": "array",
            "items": {
              "required": [
                "amount",
                "extendedTransactionData",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef",
                "voidTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the openpay transaction in the container.",
                  "example": "1000000000670622"
                },
                "voidTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the void transaction in the container.",
                  "example": "1000000000670747"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount processed in the void.",
                  "example": 20.5
                },
                "extendedTransactionData": {
                  "type": "array",
                  "description": "This array is only included in the response if it is enabled in the consumers API configuration.",
                  "items": {
                    "required": [
                      "field",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "The name of the extended transaction data field.",
                        "enum": [
                          "openPayTransactionId",
                          "openPayOrderId",
                          "openPayPaymentMethod",
                          "openPayCreatedAt",
                          "openPayBillingAccountId",
                          "openPayBillingAccountName",
                          "openPayBillingAccountABN"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the extended transaction data field.",
                        "example": "3049562340, 100015, openPayPaymentMethod, 1592494136891, 24354657685656, Some Business Account, 88 000 014 675"
                      }
                    }
                  }
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "00"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "APPROVED"
                }
              }
            }
          }
        },
        "description": "The JSON success response structure of the Voids endpoint.",
        "example": {
          "transactionReceipt": "1000000000670747",
          "voidResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "voidTransactionRef": "1000000000670747",
              "amount": 20.5,
              "extendedTransactionData": [
                {
                  "field": "openPayTransactionId",
                  "value": "3049562340"
                },
                {
                  "field": "openPayOrderId",
                  "value": "100015"
                },
                {
                  "field": "openPayPaymentMethod",
                  "value": "openPayPaymentMethod"
                },
                {
                  "field": "openPayCreatedAt",
                  "value": "1592494136891"
                },
                {
                  "field": "openPayBillingAccountId",
                  "value": "24354657685656"
                },
                {
                  "field": "openPayBillingAccountName",
                  "value": "Some Business Account"
                },
                {
                  "field": "openPayBillingAccountABN",
                  "value": "88 000 014 675"
                }
              ],
              "externalServiceCode": "00",
              "externalServiceMessage": "APPROVED"
            }
          ]
        }
      },
      "OpenpayPaymentsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "We are currently experiencing technical issues with our service."
          },
          "paymentResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentToken"
              ],
              "type": "object",
              "properties": {
                "paymentToken": {
                  "type": "string",
                  "description": "The payment token. The payment token is a unique identifier for the payment instrument.",
                  "example": "46ee5998-10cd-11ea-8d71-362b9e155667"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "BI52"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "PAYMENT TRANSACTION FAILED"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "05"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "DO NOT HONOUR"
                }
              }
            }
          }
        },
        "description": "The JSON error response structure of the Payments endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "We are currently experiencing technical issues with our service.",
          "paymentResponses": [
            {
              "paymentToken": "46ee5998-10cd-11ea-8d71-362b9e155667",
              "errorCode": "BI52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "externalServiceCode": "05",
              "externalServiceMessage": "DO NOT HONOUR"
            }
          ]
        }
      },
      "OpenpayRefundsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "We are currently experiencing technical issues with our service."
          },
          "refundResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "BI52"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "PAYMENT TRANSACTION FAILED"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "0T"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "INVALID REFUND AUTH NOT FOUND"
                }
              }
            }
          }
        },
        "description": "The JSON error response structure of the Refunds endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "We are currently experiencing technical issues with our service.",
          "refundResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "errorCode": "BI52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID REFUND AUTH NOT FOUND"
            }
          ]
        }
      },
      "OpenpayCompletionsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "We are currently experiencing technical issues with our service."
          },
          "completionResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "BI52"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "PAYMENT TRANSACTION FAILED"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "0T"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "INVALID COMPLETION AUTH NOT FOUND"
                }
              }
            }
          }
        },
        "description": "The JSON error response structure of the Completions endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "We are currently experiencing technical issues with our service.",
          "completionResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "errorCode": "BI52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID COMPLETION AUTH NOT FOUND"
            }
          ]
        }
      },
      "OpenpayVoidsErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "BI52"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "PAYMENT TRANSACTION FAILED"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "We are currently experiencing technical issues with our service."
          },
          "voidResponses": {
            "type": "array",
            "items": {
              "required": [
                "errorCode",
                "errorDetail",
                "errorMessage",
                "externalServiceCode",
                "externalServiceMessage",
                "paymentTransactionRef"
              ],
              "type": "object",
              "properties": {
                "paymentTransactionRef": {
                  "type": "string",
                  "description": "Container reference in the transaction logs. This number uniquely identifies the credit card transaction in the container.",
                  "example": "1000000000670622"
                },
                "errorCode": {
                  "type": "string",
                  "description": "The error code. Only present if an error occurred during payment.",
                  "example": "BI52"
                },
                "errorMessage": {
                  "type": "string",
                  "description": "The error message. Only present if an error occurred during payment.",
                  "example": "PAYMENT TRANSACTION FAILED"
                },
                "errorDetail": {
                  "type": "string",
                  "description": "The error detail. Only present if an error occurred during payment.",
                  "example": "We are currently experiencing technical issues with our service."
                },
                "externalServiceCode": {
                  "type": "string",
                  "description": "The external service code (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "0T"
                },
                "externalServiceMessage": {
                  "type": "string",
                  "description": "The external service message (from eg. Openpay). This property is only included in the response if it is enabled in the consumers API configuration.",
                  "example": "INVALID VOID AUTH NOT FOUND"
                }
              }
            }
          }
        },
        "description": "The JSON error response structure of the Voids endpoint.",
        "example": {
          "httpStatusCode": 400,
          "errorCode": "BI52",
          "errorMessage": "PAYMENT TRANSACTION FAILED",
          "errorDetail": "We are currently experiencing technical issues with our service.",
          "voidResponses": [
            {
              "paymentTransactionRef": "1000000000670622",
              "errorCode": "BI52",
              "errorMessage": "PAYMENT TRANSACTION FAILED",
              "errorDetail": "We are currently experiencing technical issues with our service. Please try again later. We apologise for the inconvenience Please contact support for further investigation. (Payment)",
              "externalServiceCode": "0T",
              "externalServiceMessage": "INVALID VOID AUTH NOT FOUND"
            }
          ]
        }
      },
      "BaseErrorResponse": {
        "required": [
          "errorCode",
          "errorDetail",
          "errorMessage",
          "httpStatusCode"
        ],
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "number",
            "description": "The http status code (4xx and 5xx HTTP status codes).",
            "example": 500
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "example": "AP99"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "example": "Internal Server Error"
          },
          "errorDetail": {
            "type": "string",
            "description": "The error detail.",
            "example": "Oops! An error has occurred: ScriptExecutionFailed"
          }
        },
        "description": "The base JSON response structure of all errors.",
        "example": {
          "httpStatusCode": 500,
          "errorCode": "AP99",
          "errorMessage": "Internal Server Error",
          "errorDetail": "Oops! An error has occurred: ScriptExecutionFailed"
        }
      }
    }
  }
}
